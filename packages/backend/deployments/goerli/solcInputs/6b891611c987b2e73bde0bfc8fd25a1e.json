{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFV2WrapperInterface {\n  /**\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\n   * be relied option within the same transaction that the request was made.\n   */\n  function lastRequestId() external view returns (uint256);\n\n  /**\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\n   * @notice block.\n   *\n   * @dev This function relies on the transaction gas price which is not automatically set during\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\n   *\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\n   */\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\n\n  /**\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\n   *\n   * @dev This is a convenience function that can be called in simulation to better understand\n   * @dev pricing.\n   *\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\n   */\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/VRFV2WrapperInterface.sol\";\n\n/** *******************************************************************************\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\n * ********************************************************************************\n * @dev PURPOSE\n *\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\n * @dev paying up front rather than at fulfillment.\n *\n * @dev Since the price is determined using the gas price of the request transaction rather than\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\n * @dev paying for the request based on the current pricing.\n *\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\n * @dev fulfillment with the randomness result.\n */\nabstract contract VRFV2WrapperConsumerBase {\n  LinkTokenInterface internal immutable LINK;\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\n\n  /**\n   * @param _link is the address of LinkToken\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\n   */\n  constructor(address _link, address _vrfV2Wrapper) {\n    LINK = LinkTokenInterface(_link);\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\n  }\n\n  /**\n   * @dev Requests randomness from the VRF V2 wrapper.\n   *\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\n   *        fulfillRandomWords function.\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\n   *        request. A higher number of confirmations increases security by reducing the likelihood\n   *        that a chain re-org changes a published randomness outcome.\n   * @param _numWords is the number of random words to request.\n   *\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\n   */\n  function requestRandomness(\n    uint32 _callbackGasLimit,\n    uint16 _requestConfirmations,\n    uint32 _numWords\n  ) internal returns (uint256 requestId) {\n    LINK.transferAndCall(\n      address(VRF_V2_WRAPPER),\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\n    );\n    return VRF_V2_WRAPPER.lastRequestId();\n  }\n\n  /**\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\n   * @notice implement it.\n   *\n   * @param _requestId is the VRF V2 request ID.\n   * @param _randomWords is the randomness result.\n   */\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\n\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\n    require(msg.sender == address(VRF_V2_WRAPPER), \"only VRF V2 wrapper can fulfill\");\n    fulfillRandomWords(_requestId, _randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/DateTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// DateTime Library v2.0\r\n//\r\n// A gas-efficient Solidity date and time library\r\n//\r\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\r\n//\r\n// Tested date range 1970/01/01 to 2345/12/31\r\n//\r\n// Conventions:\r\n// Unit      | Range         | Notes\r\n// :-------- |:-------------:|:-----\r\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\r\n// year      | 1970 ... 2345 |\r\n// month     | 1 ... 12      |\r\n// day       | 1 ... 31      |\r\n// hour      | 0 ... 23      |\r\n// minute    | 0 ... 59      |\r\n// second    | 0 ... 59      |\r\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\r\n//\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary DateTime {\r\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint256 constant SECONDS_PER_MINUTE = 60;\r\n    int256 constant OFFSET19700101 = 2440588;\r\n\r\n    uint256 constant DOW_MON = 1;\r\n    uint256 constant DOW_TUE = 2;\r\n    uint256 constant DOW_WED = 3;\r\n    uint256 constant DOW_THU = 4;\r\n    uint256 constant DOW_FRI = 5;\r\n    uint256 constant DOW_SAT = 6;\r\n    uint256 constant DOW_SUN = 7;\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate the number of days from 1970/01/01 to year/month/day using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // days = day\r\n    //      - 32075\r\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\r\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\r\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\r\n    //      - offset\r\n    // ------------------------------------------------------------------------\r\n    function _daysFromDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) internal pure returns (uint256 _days) {\r\n        require(year >= 1970);\r\n        int256 _year = int256(year);\r\n        int256 _month = int256(month);\r\n        int256 _day = int256(day);\r\n\r\n        int256 __days = _day -\r\n            32075 +\r\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\r\n            4 +\r\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\r\n            12 -\r\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\r\n            4 -\r\n            OFFSET19700101;\r\n\r\n        _days = uint256(__days);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Calculate year/month/day from the number of days since 1970/01/01 using\r\n    // the date conversion algorithm from\r\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\r\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\r\n    //\r\n    // int L = days + 68569 + offset\r\n    // int N = 4 * L / 146097\r\n    // L = L - (146097 * N + 3) / 4\r\n    // year = 4000 * (L + 1) / 1461001\r\n    // L = L - 1461 * year / 4 + 31\r\n    // month = 80 * L / 2447\r\n    // dd = L - 2447 * month / 80\r\n    // L = month / 11\r\n    // month = month + 2 - 12 * L\r\n    // year = 100 * (N - 49) + year + L\r\n    // ------------------------------------------------------------------------\r\n    function _daysToDate(uint256 _days)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day\r\n        )\r\n    {\r\n        unchecked {\r\n            int256 __days = int256(_days);\r\n\r\n            int256 L = __days + 68569 + OFFSET19700101;\r\n            int256 N = (4 * L) / 146097;\r\n            L = L - (146097 * N + 3) / 4;\r\n            int256 _year = (4000 * (L + 1)) / 1461001;\r\n            L = L - (1461 * _year) / 4 + 31;\r\n            int256 _month = (80 * L) / 2447;\r\n            int256 _day = L - (2447 * _month) / 80;\r\n            L = _month / 11;\r\n            _month = _month + 2 - 12 * L;\r\n            _year = 100 * (N - 49) + _year + L;\r\n\r\n            year = uint256(_year);\r\n            month = uint256(_month);\r\n            day = uint256(_day);\r\n        }\r\n    }\r\n\r\n    function timestampFromDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) internal pure returns (uint256 timestamp) {\r\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\r\n    }\r\n\r\n    function timestampFromDateTime(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day,\r\n        uint256 hour,\r\n        uint256 minute,\r\n        uint256 second\r\n    ) internal pure returns (uint256 timestamp) {\r\n        timestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            hour *\r\n            SECONDS_PER_HOUR +\r\n            minute *\r\n            SECONDS_PER_MINUTE +\r\n            second;\r\n    }\r\n\r\n    function timestampToDate(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day\r\n        )\r\n    {\r\n        unchecked {\r\n            (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        }\r\n    }\r\n\r\n    function timestampToDateTime(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day,\r\n            uint256 hour,\r\n            uint256 minute,\r\n            uint256 second\r\n        )\r\n    {\r\n        unchecked {\r\n            (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n            uint256 secs = timestamp % SECONDS_PER_DAY;\r\n            hour = secs / SECONDS_PER_HOUR;\r\n            secs = secs % SECONDS_PER_HOUR;\r\n            minute = secs / SECONDS_PER_MINUTE;\r\n            second = secs % SECONDS_PER_MINUTE;\r\n        }\r\n    }\r\n\r\n    function isValidDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) internal pure returns (bool valid) {\r\n        if (year >= 1970 && month > 0 && month <= 12) {\r\n            uint256 daysInMonth = _getDaysInMonth(year, month);\r\n            if (day > 0 && day <= daysInMonth) {\r\n                valid = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function isValidDateTime(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day,\r\n        uint256 hour,\r\n        uint256 minute,\r\n        uint256 second\r\n    ) internal pure returns (bool valid) {\r\n        if (isValidDate(year, month, day)) {\r\n            if (hour < 24 && minute < 60 && second < 60) {\r\n                valid = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function isLeapYear(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (bool leapYear)\r\n    {\r\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n        leapYear = _isLeapYear(year);\r\n    }\r\n\r\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\r\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\r\n    }\r\n\r\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\r\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\r\n    }\r\n\r\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\r\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\r\n    }\r\n\r\n    function getDaysInMonth(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 daysInMonth)\r\n    {\r\n        (uint256 year, uint256 month, ) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        daysInMonth = _getDaysInMonth(year, month);\r\n    }\r\n\r\n    function _getDaysInMonth(uint256 year, uint256 month)\r\n        internal\r\n        pure\r\n        returns (uint256 daysInMonth)\r\n    {\r\n        if (\r\n            month == 1 ||\r\n            month == 3 ||\r\n            month == 5 ||\r\n            month == 7 ||\r\n            month == 8 ||\r\n            month == 10 ||\r\n            month == 12\r\n        ) {\r\n            daysInMonth = 31;\r\n        } else if (month != 2) {\r\n            daysInMonth = 30;\r\n        } else {\r\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\r\n        }\r\n    }\r\n\r\n    // 1 = Monday, 7 = Sunday\r\n    function getDayOfWeek(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 dayOfWeek)\r\n    {\r\n        uint256 _days = timestamp / SECONDS_PER_DAY;\r\n        dayOfWeek = ((_days + 3) % 7) + 1;\r\n    }\r\n\r\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\r\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\r\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\r\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\r\n        uint256 secs = timestamp % SECONDS_PER_DAY;\r\n        hour = secs / SECONDS_PER_HOUR;\r\n    }\r\n\r\n    function getMinute(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 minute)\r\n    {\r\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\r\n        minute = secs / SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function getSecond(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 second)\r\n    {\r\n        second = timestamp % SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function addYears(uint256 timestamp, uint256 _years)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        year += _years;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function addMonths(uint256 timestamp, uint256 _months)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        month += _months;\r\n        year += (month - 1) / 12;\r\n        month = ((month - 1) % 12) + 1;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function addDays(uint256 timestamp, uint256 _days)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function addHours(uint256 timestamp, uint256 _hours)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function addMinutes(uint256 timestamp, uint256 _minutes)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function addSeconds(uint256 timestamp, uint256 _seconds)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp + _seconds;\r\n        require(newTimestamp >= timestamp);\r\n    }\r\n\r\n    function subYears(uint256 timestamp, uint256 _years)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        year -= _years;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function subMonths(uint256 timestamp, uint256 _months)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\r\n            timestamp / SECONDS_PER_DAY\r\n        );\r\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\r\n        year = yearMonth / 12;\r\n        month = (yearMonth % 12) + 1;\r\n        uint256 daysInMonth = _getDaysInMonth(year, month);\r\n        if (day > daysInMonth) {\r\n            day = daysInMonth;\r\n        }\r\n        newTimestamp =\r\n            _daysFromDate(year, month, day) *\r\n            SECONDS_PER_DAY +\r\n            (timestamp % SECONDS_PER_DAY);\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function subDays(uint256 timestamp, uint256 _days)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function subHours(uint256 timestamp, uint256 _hours)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function subMinutes(uint256 timestamp, uint256 _minutes)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function subSeconds(uint256 timestamp, uint256 _seconds)\r\n        internal\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = timestamp - _seconds;\r\n        require(newTimestamp <= timestamp);\r\n    }\r\n\r\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _years)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\r\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\r\n        _years = toYear - fromYear;\r\n    }\r\n\r\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _months)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(\r\n            fromTimestamp / SECONDS_PER_DAY\r\n        );\r\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(\r\n            toTimestamp / SECONDS_PER_DAY\r\n        );\r\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\r\n    }\r\n\r\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _days)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\r\n    }\r\n\r\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _hours)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\r\n    }\r\n\r\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _minutes)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\r\n    }\r\n\r\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\r\n        internal\r\n        pure\r\n        returns (uint256 _seconds)\r\n    {\r\n        require(fromTimestamp <= toTimestamp);\r\n        _seconds = toTimestamp - fromTimestamp;\r\n    }\r\n}\r\n"
    },
    "contracts/DateTimeContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// DateTime Library v2.0 - Contract Instance\r\n//\r\n// A gas-efficient Solidity date and time library\r\n//\r\n// https://github.com/bokkypoobah/DateTime\r\n//\r\n// Tested date range 1970/01/01 to 2345/12/31\r\n//\r\n// Conventions:\r\n// Unit      | Range         | Notes\r\n// :-------- |:-------------:|:-----\r\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\r\n// year      | 1970 ... 2345 |\r\n// month     | 1 ... 12      |\r\n// day       | 1 ... 31      |\r\n// hour      | 0 ... 23      |\r\n// minute    | 0 ... 59      |\r\n// second    | 0 ... 59      |\r\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\r\n//\r\n//\r\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\r\n//\r\n// GNU Lesser General Public License 3.0\r\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\r\n// ----------------------------------------------------------------------------\r\n\r\nimport \"./DateTime.sol\";\r\n\r\ncontract DateTimeContract {\r\n    uint256 public constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint256 public constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint256 public constant SECONDS_PER_MINUTE = 60;\r\n    int256 public constant OFFSET19700101 = 2440588;\r\n\r\n    uint256 public constant DOW_MON = 1;\r\n    uint256 public constant DOW_TUE = 2;\r\n    uint256 public constant DOW_WED = 3;\r\n    uint256 public constant DOW_THU = 4;\r\n    uint256 public constant DOW_FRI = 5;\r\n    uint256 public constant DOW_SAT = 6;\r\n    uint256 public constant DOW_SUN = 7;\r\n\r\n    function _now() public view returns (uint256 timestamp) {\r\n        timestamp = block.timestamp;\r\n    }\r\n\r\n    function _nowDateTime()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day,\r\n            uint256 hour,\r\n            uint256 minute,\r\n            uint256 second\r\n        )\r\n    {\r\n        (year, month, day, hour, minute, second) = DateTime.timestampToDateTime(\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _daysFromDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) public pure returns (uint256 _days) {\r\n        return DateTime._daysFromDate(year, month, day);\r\n    }\r\n\r\n    function _daysToDate(uint256 _days)\r\n        public\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day\r\n        )\r\n    {\r\n        return DateTime._daysToDate(_days);\r\n    }\r\n\r\n    function timestampFromDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) public pure returns (uint256 timestamp) {\r\n        return DateTime.timestampFromDate(year, month, day);\r\n    }\r\n\r\n    function timestampFromDateTime(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day,\r\n        uint256 hour,\r\n        uint256 minute,\r\n        uint256 second\r\n    ) public pure returns (uint256 timestamp) {\r\n        return\r\n            DateTime.timestampFromDateTime(\r\n                year,\r\n                month,\r\n                day,\r\n                hour,\r\n                minute,\r\n                second\r\n            );\r\n    }\r\n\r\n    function timestampToDate(uint256 timestamp)\r\n        public\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day\r\n        )\r\n    {\r\n        (year, month, day) = DateTime.timestampToDate(timestamp);\r\n    }\r\n\r\n    function timestampToDateTime(uint256 timestamp)\r\n        public\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day,\r\n            uint256 hour,\r\n            uint256 minute,\r\n            uint256 second\r\n        )\r\n    {\r\n        (year, month, day, hour, minute, second) = DateTime.timestampToDateTime(\r\n            timestamp\r\n        );\r\n    }\r\n\r\n    function isValidDate(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day\r\n    ) public pure returns (bool valid) {\r\n        valid = DateTime.isValidDate(year, month, day);\r\n    }\r\n\r\n    function isValidDateTime(\r\n        uint256 year,\r\n        uint256 month,\r\n        uint256 day,\r\n        uint256 hour,\r\n        uint256 minute,\r\n        uint256 second\r\n    ) public pure returns (bool valid) {\r\n        valid = DateTime.isValidDateTime(\r\n            year,\r\n            month,\r\n            day,\r\n            hour,\r\n            minute,\r\n            second\r\n        );\r\n    }\r\n\r\n    function isLeapYear(uint256 timestamp) public pure returns (bool leapYear) {\r\n        leapYear = DateTime.isLeapYear(timestamp);\r\n    }\r\n\r\n    function _isLeapYear(uint256 year) public pure returns (bool leapYear) {\r\n        leapYear = DateTime._isLeapYear(year);\r\n    }\r\n\r\n    function isWeekDay(uint256 timestamp) public pure returns (bool weekDay) {\r\n        weekDay = DateTime.isWeekDay(timestamp);\r\n    }\r\n\r\n    function isWeekEnd(uint256 timestamp) public pure returns (bool weekEnd) {\r\n        weekEnd = DateTime.isWeekEnd(timestamp);\r\n    }\r\n\r\n    function getDaysInMonth(uint256 timestamp)\r\n        public\r\n        pure\r\n        returns (uint256 daysInMonth)\r\n    {\r\n        daysInMonth = DateTime.getDaysInMonth(timestamp);\r\n    }\r\n\r\n    function _getDaysInMonth(uint256 year, uint256 month)\r\n        public\r\n        pure\r\n        returns (uint256 daysInMonth)\r\n    {\r\n        daysInMonth = DateTime._getDaysInMonth(year, month);\r\n    }\r\n\r\n    function getDayOfWeek(uint256 timestamp)\r\n        public\r\n        pure\r\n        returns (uint256 dayOfWeek)\r\n    {\r\n        dayOfWeek = DateTime.getDayOfWeek(timestamp);\r\n    }\r\n\r\n    function getYear(uint256 timestamp) public pure returns (uint256 year) {\r\n        year = DateTime.getYear(timestamp);\r\n    }\r\n\r\n    function getMonth(uint256 timestamp) public pure returns (uint256 month) {\r\n        month = DateTime.getMonth(timestamp);\r\n    }\r\n\r\n    function getDay(uint256 timestamp) public pure returns (uint256 day) {\r\n        day = DateTime.getDay(timestamp);\r\n    }\r\n\r\n    function getHour(uint256 timestamp) public pure returns (uint256 hour) {\r\n        hour = DateTime.getHour(timestamp);\r\n    }\r\n\r\n    function getMinute(uint256 timestamp) public pure returns (uint256 minute) {\r\n        minute = DateTime.getMinute(timestamp);\r\n    }\r\n\r\n    function getSecond(uint256 timestamp) public pure returns (uint256 second) {\r\n        second = DateTime.getSecond(timestamp);\r\n    }\r\n\r\n    function addYears(uint256 timestamp, uint256 _years)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.addYears(timestamp, _years);\r\n    }\r\n\r\n    function addMonths(uint256 timestamp, uint256 _months)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.addMonths(timestamp, _months);\r\n    }\r\n\r\n    function addDays(uint256 timestamp, uint256 _days)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.addDays(timestamp, _days);\r\n    }\r\n\r\n    function addHours(uint256 timestamp, uint256 _hours)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.addHours(timestamp, _hours);\r\n    }\r\n\r\n    function addMinutes(uint256 timestamp, uint256 _minutes)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.addMinutes(timestamp, _minutes);\r\n    }\r\n\r\n    function addSeconds(uint256 timestamp, uint256 _seconds)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.addSeconds(timestamp, _seconds);\r\n    }\r\n\r\n    function subYears(uint256 timestamp, uint256 _years)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.subYears(timestamp, _years);\r\n    }\r\n\r\n    function subMonths(uint256 timestamp, uint256 _months)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.subMonths(timestamp, _months);\r\n    }\r\n\r\n    function subDays(uint256 timestamp, uint256 _days)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.subDays(timestamp, _days);\r\n    }\r\n\r\n    function subHours(uint256 timestamp, uint256 _hours)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.subHours(timestamp, _hours);\r\n    }\r\n\r\n    function subMinutes(uint256 timestamp, uint256 _minutes)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.subMinutes(timestamp, _minutes);\r\n    }\r\n\r\n    function subSeconds(uint256 timestamp, uint256 _seconds)\r\n        public\r\n        pure\r\n        returns (uint256 newTimestamp)\r\n    {\r\n        newTimestamp = DateTime.subSeconds(timestamp, _seconds);\r\n    }\r\n\r\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\r\n        public\r\n        pure\r\n        returns (uint256 _years)\r\n    {\r\n        _years = DateTime.diffYears(fromTimestamp, toTimestamp);\r\n    }\r\n\r\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\r\n        public\r\n        pure\r\n        returns (uint256 _months)\r\n    {\r\n        _months = DateTime.diffMonths(fromTimestamp, toTimestamp);\r\n    }\r\n\r\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\r\n        public\r\n        pure\r\n        returns (uint256 _days)\r\n    {\r\n        _days = DateTime.diffDays(fromTimestamp, toTimestamp);\r\n    }\r\n\r\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\r\n        public\r\n        pure\r\n        returns (uint256 _hours)\r\n    {\r\n        _hours = DateTime.diffHours(fromTimestamp, toTimestamp);\r\n    }\r\n\r\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\r\n        public\r\n        pure\r\n        returns (uint256 _minutes)\r\n    {\r\n        _minutes = DateTime.diffMinutes(fromTimestamp, toTimestamp);\r\n    }\r\n\r\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\r\n        public\r\n        pure\r\n        returns (uint256 _seconds)\r\n    {\r\n        _seconds = DateTime.diffSeconds(fromTimestamp, toTimestamp);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IDateTime.sol": {
      "content": "interface IDateTime {\r\n    function timestampToDate(uint256)\r\n        external\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function timestampToDateTime(uint256 timestamp)\r\n        external\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day,\r\n            uint256 hour,\r\n            uint256 minute,\r\n            uint256 second\r\n        );\r\n}\r\n"
    },
    "contracts/interfaces/IRegenBingoMetadata.sol": {
      "content": "interface IRegenBingoMetadata {\r\n    function generateTokenURI(\r\n        uint256 tokenId,\r\n        uint256[9][3] calldata numbers,\r\n        bool[9][3] calldata covered,\r\n        uint256 donationAmount,\r\n        string memory donationName,\r\n        address donationAddress,\r\n        bool isBingoFinished,\r\n        uint256 drawTimestamp\r\n    ) external view virtual returns (string memory);\r\n\r\n    function generateContractURI() external pure returns (string memory);\r\n}\r\n"
    },
    "contracts/interfaces/IRegenBingoSVG.sol": {
      "content": "interface IRegenBingoSVG {\r\n    function generateTokenSVG(\r\n        uint256 tokenId,\r\n        uint256[9][3] calldata numbers,\r\n        bool[9][3] calldata covered,\r\n        uint256 donationAmount,\r\n        string memory donationName,\r\n        address donationAddress,\r\n        bool isBingoFinished,\r\n        uint256 drawTimestamp\r\n    ) external view returns (string memory);\r\n}\r\n"
    },
    "contracts/RegenBingo.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"./interfaces/IRegenBingoMetadata.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\";\r\n\r\ncontract RegenBingo is ERC721Enumerable, VRFV2WrapperConsumerBase {\r\n    using Strings for uint256;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    enum BingoState {\r\n        MINT,\r\n        DRAW,\r\n        FINISHED\r\n    }\r\n\r\n    // Bingo Card layouts.\r\n    // Cells have the following format: [lowest_available_number, possible_options]\r\n    // Given a seed, a number in the cell could be calculated as:\r\n    // lowest_available_number + (seed % possible_options)\r\n    // Following these rules: https://en.wikipedia.org/wiki/Bingo_card#90-ball_bingo_cards\r\n    // Using these as templates: https://www.scribd.com/document/325121782/1-90-British-Bingo-Cards\r\n    uint256 constant LAYOUTS_COUNT = 3;\r\n    uint8[2][9][3][LAYOUTS_COUNT] LAYOUTS = [\r\n        [\r\n            [\r\n                [1, 9],\r\n                [0, 0],\r\n                [0, 0],\r\n                [0, 0],\r\n                [40, 5],\r\n                [56, 4],\r\n                [60, 10],\r\n                [77, 3],\r\n                [0, 0]\r\n            ],\r\n            [\r\n                [0, 0],\r\n                [0, 0],\r\n                [0, 0],\r\n                [30, 10],\r\n                [45, 5],\r\n                [53, 3],\r\n                [0, 0],\r\n                [74, 3],\r\n                [80, 6]\r\n            ],\r\n            [\r\n                [0, 0],\r\n                [10, 10],\r\n                [20, 10],\r\n                [0, 0],\r\n                [0, 0],\r\n                [50, 3],\r\n                [0, 0],\r\n                [70, 4],\r\n                [86, 5]\r\n            ]\r\n        ],\r\n        [\r\n            [\r\n                [6, 4],\r\n                [10, 5],\r\n                [0, 0],\r\n                [0, 0],\r\n                [0, 0],\r\n                [0, 0],\r\n                [66, 4],\r\n                [75, 5],\r\n                [80, 11]\r\n            ],\r\n            [\r\n                [0, 0],\r\n                [0, 0],\r\n                [25, 5],\r\n                [30, 10],\r\n                [40, 10],\r\n                [50, 10],\r\n                [63, 3],\r\n                [0, 0],\r\n                [0, 0]\r\n            ],\r\n            [\r\n                [1, 5],\r\n                [15, 5],\r\n                [20, 5],\r\n                [0, 0],\r\n                [0, 0],\r\n                [0, 0],\r\n                [60, 3],\r\n                [70, 5],\r\n                [0, 0]\r\n            ]\r\n        ],\r\n        [\r\n            [\r\n                [1, 5],\r\n                [0, 0],\r\n                [25, 5],\r\n                [0, 0],\r\n                [0, 0],\r\n                [50, 10],\r\n                [0, 0],\r\n                [70, 5],\r\n                [88, 3]\r\n            ],\r\n            [\r\n                [0, 0],\r\n                [10, 10],\r\n                [20, 5],\r\n                [30, 10],\r\n                [0, 0],\r\n                [0, 0],\r\n                [65, 5],\r\n                [0, 0],\r\n                [84, 4]\r\n            ],\r\n            [\r\n                [6, 4],\r\n                [0, 0],\r\n                [0, 0],\r\n                [0, 0],\r\n                [40, 10],\r\n                [0, 0],\r\n                [60, 5],\r\n                [75, 5],\r\n                [80, 4]\r\n            ]\r\n        ]\r\n    ];\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             STATE VARIABLES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    IRegenBingoMetadata metadataGenerator;\r\n\r\n    BingoState public bingoState;\r\n    uint256 public mintPrice;\r\n    uint256 public drawTimestamp;\r\n    uint256 public drawNumberCooldownSeconds;\r\n    uint256 public lastDrawTime;\r\n    string public donationName;\r\n    address payable public donationAddress;\r\n    EnumerableSet.UintSet private drawnNumbers;\r\n\r\n    //RandomRequest ID = 0\r\n    bool public isRandomSeedFulfilled = false;\r\n    uint256 public randomSeed;\r\n    uint32 callbackGasLimit = 100000;\r\n    uint16 requestConfirmations = 3;\r\n    uint32 numWords = 1;\r\n    uint256 public requestBlockNumber;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event DrawNumber(uint256 number);\r\n    event ClaimPrize(uint256 tokenId, address winner);\r\n    event DrawStarted();\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _mintPrice,\r\n        uint256 _drawTimestamp,\r\n        uint256 _drawNumberCooldownSeconds,\r\n        string memory _donationName,\r\n        address payable _donationAddress,\r\n        address _metadataGenerator,\r\n        address _linkAddress,\r\n        address _wrapperAddress\r\n    )\r\n        ERC721(_name, _symbol)\r\n        VRFV2WrapperConsumerBase(_linkAddress, _wrapperAddress)\r\n    {\r\n        mintPrice = _mintPrice;\r\n        drawTimestamp = _drawTimestamp;\r\n        drawNumberCooldownSeconds = _drawNumberCooldownSeconds;\r\n        donationName = _donationName;\r\n        donationAddress = _donationAddress;\r\n        metadataGenerator = IRegenBingoMetadata(_metadataGenerator);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           EXTERNAL FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function mint() external payable {\r\n        require(bingoState == BingoState.MINT, \"It is not mint period\");\r\n        require(msg.value == mintPrice, \"Incorrect payment amount\");\r\n        // Using totalSupply() so that one can mint multiple different cards in a block\r\n        uint256 tokenId = uint256(\r\n            keccak256(\r\n                abi.encodePacked(totalSupply(), msg.sender, block.timestamp)\r\n            )\r\n        );\r\n        _mint(msg.sender, tokenId);\r\n    }\r\n\r\n    function mintMultiple(uint256 mintCount) external payable {\r\n        require(bingoState == BingoState.MINT, \"It is not mint period\");\r\n        require(msg.value == mintPrice * mintCount, \"Incorrect payment amount\");\r\n        for (uint256 i = 0; i < mintCount; i++) {\r\n            // Using totalSupply() so that one can mint multiple different cards in a block\r\n            uint256 tokenId = uint256(\r\n                keccak256(\r\n                    abi.encodePacked(totalSupply(), msg.sender, block.timestamp)\r\n                )\r\n            );\r\n            _mint(msg.sender, tokenId);\r\n        }\r\n    }\r\n\r\n    function drawNumber() external returns (uint256) {\r\n        require(bingoState == BingoState.DRAW, \"It is not draw period\");\r\n        require(\r\n            block.timestamp > lastDrawTime + drawNumberCooldownSeconds,\r\n            \"Draw too soon\"\r\n        );\r\n        require(\r\n            block.number > requestBlockNumber + requestConfirmations,\r\n            \"Waiting for random seed\"\r\n        );\r\n\r\n        uint256 nonce = 0;\r\n        uint256 number = 1 +\r\n            (uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        block.timestamp,\r\n                        block.difficulty,\r\n                        randomSeed,\r\n                        nonce\r\n                    )\r\n                )\r\n            ) % 90);\r\n\r\n        while (drawnNumbers.contains(number)) {\r\n            number =\r\n                1 +\r\n                (uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            number,\r\n                            block.timestamp,\r\n                            block.difficulty,\r\n                            randomSeed,\r\n                            nonce\r\n                        )\r\n                    )\r\n                ) % 90);\r\n            nonce++;\r\n        }\r\n\r\n        drawnNumbers.add(number);\r\n        lastDrawTime = block.timestamp;\r\n        emit DrawNumber(number);\r\n        return number;\r\n    }\r\n\r\n    function claimPrize(uint256 id) external {\r\n        require(bingoState != BingoState.FINISHED, \"Game Over\");\r\n        _requireMinted(id);\r\n        require(coveredNumbers(id) == 15, \"INELIGIBLE\");\r\n        donationAddress.call{value: address(this).balance / 2}(\"\");\r\n        address payable winner = payable(ownerOf(id));\r\n        winner.call{value: address(this).balance}(\"\");\r\n        bingoState = BingoState.FINISHED;\r\n        emit ClaimPrize(id, winner);\r\n    }\r\n\r\n    function startDrawPeriod() external {\r\n        require(bingoState == BingoState.MINT);\r\n        require(block.timestamp > drawTimestamp, \"It is not draw period yet\");\r\n        requestRandomness(callbackGasLimit, requestConfirmations, numWords);\r\n        requestBlockNumber = block.number;\r\n        bingoState = BingoState.DRAW;\r\n        emit DrawStarted();\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 _requestId,\r\n        uint256[] memory _randomWords\r\n    ) internal override {\r\n        require(bingoState == BingoState.DRAW, \"It is not draw period yet\");\r\n        require(isRandomSeedFulfilled == false, \"Seed has already fulfilled\");\r\n        randomSeed = _randomWords[0];\r\n        isRandomSeedFulfilled = true;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                          PUBLIC VIEW FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(ownerOf(tokenId) != address(0), \"INVALID_TOKEN_ID\");\r\n        return\r\n            metadataGenerator.generateTokenURI(\r\n                tokenId,\r\n                numbers(tokenId),\r\n                covered(tokenId),\r\n                mintPrice / 2,\r\n                donationName,\r\n                donationAddress,\r\n                bingoState == BingoState.FINISHED,\r\n                drawTimestamp\r\n            );\r\n    }\r\n\r\n    function numbers(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256[9][3] memory numbers)\r\n    {\r\n        for (uint256 row = 0; row < 3; row++) {\r\n            for (uint256 column = 0; column < 9; column++) {\r\n                numbers[row][column] = getNumberByCoordinates(\r\n                    tokenId,\r\n                    row,\r\n                    column\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function covered(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (bool[9][3] memory covered)\r\n    {\r\n        require(ownerOf(tokenId) != address(0), \"INVALID_TOKEN_ID\");\r\n        for (uint256 row = 0; row < 3; row++) {\r\n            for (uint256 column = 0; column < 9; column++) {\r\n                if (\r\n                    drawnNumbers.contains(\r\n                        getNumberByCoordinates(tokenId, row, column)\r\n                    )\r\n                ) {\r\n                    covered[row][column] = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function coveredNumbers(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256 count)\r\n    {\r\n        require(ownerOf(tokenId) != address(0), \"INVALID_TOKEN_ID\");\r\n        for (uint256 row = 0; row < 3; row++) {\r\n            for (uint256 column = 0; column < 9; column++) {\r\n                if (\r\n                    drawnNumbers.contains(\r\n                        getNumberByCoordinates(tokenId, row, column)\r\n                    )\r\n                ) {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getNumberByCoordinates(\r\n        uint256 tokenId,\r\n        uint256 row,\r\n        uint256 column\r\n    ) public view returns (uint256) {\r\n        uint8[2][9][3] memory layout = LAYOUTS[tokenId % LAYOUTS_COUNT];\r\n        if (layout[row][column][0] == 0) {\r\n            return 0;\r\n        } else {\r\n            return layout[row][column][0] + (tokenId % layout[row][column][1]);\r\n        }\r\n    }\r\n\r\n    function getDrawnNumbers() public view returns (uint256[] memory) {\r\n        return drawnNumbers.values();\r\n    }\r\n}\r\n"
    },
    "contracts/RegenBingoMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\r\nimport \"./interfaces/IRegenBingoSVG.sol\";\r\nimport \"./interfaces/IRegenBingoMetadata.sol\";\r\n\r\ncontract RegenBingoMetadata is IRegenBingoMetadata {\r\n    IRegenBingoSVG public svgGenerator;\r\n\r\n    constructor(address _svgGeneratorAddress) {\r\n        svgGenerator = IRegenBingoSVG(_svgGeneratorAddress);\r\n    }\r\n\r\n    function generateTokenURI(\r\n        uint256 tokenId,\r\n        uint256[9][3] calldata numbers,\r\n        bool[9][3] calldata covered,\r\n        uint256 donationAmount,\r\n        string memory donationName,\r\n        address donationAddress,\r\n        bool isBingoFinished,\r\n        uint256 drawTimestamp\r\n    ) external view virtual returns (string memory) {\r\n        string memory json = Base64.encode(\r\n            bytes(\r\n                string(\r\n                    abi.encodePacked(\r\n                        '{\"name\":\"RegenBingo #',\r\n                        Strings.toString(tokenId),\r\n                        '\",\"description\":\"...\",\"image\":\"',\r\n                        _generateImageStringFraction(\r\n                            tokenId,\r\n                            numbers,\r\n                            covered,\r\n                            donationAmount,\r\n                            donationName,\r\n                            donationAddress,\r\n                            isBingoFinished,\r\n                            drawTimestamp\r\n                        ),\r\n                        '\"}'\r\n                    )\r\n                )\r\n            )\r\n        );\r\n        return string(abi.encodePacked(\"data:application/json;base64,\", json));\r\n    }\r\n\r\n    function generateContractURI() external pure returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:application/json;base64,\",\r\n                    Base64.encode(\r\n                        '{\"name\":\"RegenBingo\",\"description\":\"RegenBingo is a simple experimental game to raise ETH for public goods funding while entertaining us greenpilled regens.\",\"image\":\"...\",\"external_url\":\"https://www.regen.bingo\"}'\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function _generateImageStringFraction(\r\n        uint256 tokenId,\r\n        uint256[9][3] calldata numbers,\r\n        bool[9][3] calldata covered,\r\n        uint256 donationAmount,\r\n        string memory donationName,\r\n        address donationAddress,\r\n        bool isBingoFinished,\r\n        uint256 drawTimestamp\r\n    ) internal view returns (string memory) {\r\n        string memory svg = svgGenerator.generateTokenSVG(\r\n            tokenId,\r\n            numbers,\r\n            covered,\r\n            donationAmount,\r\n            donationName,\r\n            donationAddress,\r\n            isBingoFinished,\r\n            drawTimestamp\r\n        );\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:image/svg+xml;base64,\",\r\n                    Base64.encode(bytes(svg))\r\n                )\r\n            );\r\n    }\r\n}\r\n"
    },
    "contracts/RegenBingoSVG.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\r\nimport \"./interfaces/IRegenBingoSVG.sol\";\r\nimport \"./interfaces/IDateTime.sol\";\r\n\r\ncontract RegenBingoSVG is IRegenBingoSVG {\r\n    uint256 constant xOffset = 240;\r\n    uint256 constant yOffset = 935;\r\n    uint256 constant circleXOffset = 300;\r\n    uint256 constant circleYOffset = 900;\r\n    string[40] backgroundColors = [\r\n        \"#5f9e80\",\r\n        \"#909F79\",\r\n        \"#9C9491\",\r\n        \"#A0B59E\",\r\n        \"#a3b18a\",\r\n        \"#A9B9A9\",\r\n        \"#b08968\",\r\n        \"#b1a7a6\",\r\n        \"#b57170\",\r\n        \"#b5e48c\",\r\n        \"#BAB86C\",\r\n        \"#c9ada7\",\r\n        \"#cad2c5\",\r\n        \"#cbf3f0\",\r\n        \"#ccd5ae\",\r\n        \"#cce3de\",\r\n        \"#D0C4AB\",\r\n        \"#d2b48c\",\r\n        \"#d4a373\",\r\n        \"#d5bdaf\",\r\n        \"#d9ed92\",\r\n        \"#dad7cd\",\r\n        \"#dcae96\",\r\n        \"#dda15e\",\r\n        \"#ddb892\",\r\n        \"#E0BB44\",\r\n        \"#e6ccb2\",\r\n        \"#e9d8a6\",\r\n        \"#e9edc9\",\r\n        \"#eaac8b\",\r\n        \"#eec643\",\r\n        \"#f2c078\",\r\n        \"#f5f5dc\",\r\n        \"#f7c59f\",\r\n        \"#fec89a\",\r\n        \"#ffb5a7\",\r\n        \"#ffc43d\",\r\n        \"#ffdab9\",\r\n        \"#ffe5b4\",\r\n        \"#ffefd5\"\r\n    ];\r\n    string[12] Months = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\"\r\n    ];\r\n\r\n    IDateTime dateTimeContract;\r\n\r\n    constructor(address _dateTimeContractAddress) {\r\n        dateTimeContract = IDateTime(_dateTimeContractAddress);\r\n    }\r\n\r\n    string constant defs1 =\r\n        string(\r\n            abi.encodePacked(\r\n                \"<defs>\",\r\n                '<g id=\"p\"><path fill=\"#02E2AC\" d=\"M10-0 10-16A1 1 0 00-10-16L-10 0z\"/><path fill=\"#B3FFED\" d=\"M-10 0-10 16A1 1 18 0010 16L10-0z\"/></g><g id=\"pbg\"><use href=\"#p\" transform=\"translate(1600 1733) rotate(130 442 41) scale(2,2)\"/><use href=\"#p\" transform=\"translate(500 2133) rotate(44 11 555) scale(2,2)\"/><use href=\"#p\" transform=\"translate(200 2200) rotate(20 200 200) scale(2,2)\"/><use href=\"#p\" transform=\"translate(1000 315) rotate(130 442 41) scale(2,2)\"/><use href=\"#p\" transform=\"translate(50 250) rotate(80 200 200) scale(2,2)\"/><use href=\"#p\" transform=\"translate(444 888) rotate(160 400 400) scale(2,2)\"/><use href=\"#p\" transform=\"translate(400 1700) rotate(40 67 124) scale(2,2)\"/><use href=\"#p\" transform=\"translate(0 550) rotate(140 11 362) scale(2,2)\"/><use href=\"#p\" transform=\"translate(0 1100) rotate(0 200 200) scale(3,3)\"/><use href=\"#p\" transform=\"translate(1733 333) rotate(299 60 60) scale(3,3)\"/><use href=\"#p\" transform=\"translate(1312 50) rotate(99 14 21) scale(3,3)\"/><use href=\"#p\" transform=\"translate(2200 1993) rotate(11 414 241) scale(3,3)\"/><use href=\"#p\" transform=\"translate(630 0) rotate(30 124 532) scale(3,3)\"/><use href=\"#p\" transform=\"translate(1750 850) rotate(60 200 200) scale(3,3)\"/><use href=\"#p\" transform=\"translate(0 0) rotate(310 595 381) scale(3,3)\"/><use href=\"#p\" transform=\"translate(300 1100) rotate(180 491 372) scale(3,3)\"/><use href=\"#p\" transform=\"translate(2150 650) rotate(320 713 321) scale(4,4)\"/><use href=\"#p\" transform=\"translate(400 400) rotate(180 700 700) scale(4,4)\"/><use href=\"#p\" transform=\"translate(10 155) rotate(280 412 132) scale(4,4)\"/><use href=\"#p\" transform=\"translate(12 93) rotate(33 241 414) scale(4,4)\"/><use href=\"#p\" transform=\"translate(250 1997) rotate(100 200 200) scale(4,4)\"/><use href=\"#p\" transform=\"translate(1114 2141) rotate(51 11 410) scale(4,4)\"/><use href=\"#p\" transform=\"translate(-162 1693) rotate(40 414 241) scale(4,4)\"/><use href=\"#p\" transform=\"translate(395 113) rotate(140 241 251) scale(4,4)\"/></g>',\r\n                '<path id=\"pt\" d=\"M0 0 L4800 0 Z\"/>',\r\n                '<text id=\"t\">',\r\n                '<textPath xlink:href=\"#pt\" textLength=\"2200\" font-size=\"35\">'\r\n            )\r\n        );\r\n\r\n    string constant defs2 =\r\n        string(\r\n            abi.encodePacked(\r\n                '<animate attributeName=\"startOffset\" values=\"2400; 0\" dur=\"9s\" repeatCount=\"indefinite\"/> ',\r\n                \"</textPath>\",\r\n                \"</text>\",\r\n                \"</defs>\"\r\n            )\r\n        );\r\n\r\n    string constant styles =\r\n        \"<style>text{font-family:Monaco;font-size:100px}svg{stroke:black;stroke-width:1}.a{fill:#57b592}.b{fill:#bde4df}.c{fill:#f8ce47}.d{fill:#fcf2b1}</style>\";\r\n\r\n    string constant cardPattern =\r\n        string(\r\n            abi.encodePacked(\r\n                '<pattern id=\"bg\" width=\"0.111111111111\" height=\"0.333333333333\">',\r\n                '<polygon class=\"a\" points=\"0,0 0,200 200,200\"/>',\r\n                '<polygon class=\"c\" points=\"0,0 200,0 200,200\"/>',\r\n                '<rect class=\"d\" x=\"20\" y=\"20\" width=\"160\" height=\"160\"/>'\r\n                \"</pattern>\"\r\n            )\r\n        );\r\n\r\n    string constant header =\r\n        string(\r\n            abi.encodePacked(\r\n                '<polygon class=\"b\" points=\"200,500 200,800 2000,800 2000,500\"/>',\r\n                '<polygon class=\"c\" points=\"200,500 200,800 350,650\"/>',\r\n                '<polygon class=\"c\" points=\"2000,500 2000,800 1850,650\"/>',\r\n                '<rect class=\"d\" x=\"220\" y=\"520\" width=\"1760\" height=\"260\"/>',\r\n                '<text x=\"1100\" y=\"650\" dominant-baseline=\"middle\" text-anchor=\"middle\" style=\"font-size:150\">Regen Bingo</text>'\r\n            )\r\n        );\r\n\r\n    string constant footer =\r\n        string(\r\n            abi.encodePacked(\r\n                '<polygon class=\"b\" points=\"200,1400 200,1500 2000,1500 2000,1400\"/>',\r\n                '<polygon class=\"a\" points=\"200,1400 200,1500 250,1450\"/>',\r\n                '<polygon class=\"a\" points=\"2000,1400 2000,1500 1950,1450\"/>',\r\n                '<rect class=\"d\" x=\"220\" y=\"1420\" width=\"1760\" height=\"60\"/>',\r\n                '<clipPath id=\"clip\">',\r\n                '<rect x=\"230\" y=\"1420\" width=\"1740\" height=\"60\"/>',\r\n                \"</clipPath>\",\r\n                '<g clip-path=\"url(#clip)\">',\r\n                '<use x=\"-1900\" y=\"1460\" href=\"#t\"/>',\r\n                '<use x=\"500\" y=\"1460\" href=\"#t\"/>',\r\n                \"</g>\"\r\n            )\r\n        );\r\n\r\n    function generateTokenSVG(\r\n        uint256 tokenId,\r\n        uint256[9][3] calldata numbers,\r\n        bool[9][3] calldata covered,\r\n        uint256 donationAmount,\r\n        string memory donationName,\r\n        address donationAddress,\r\n        bool isBingoFinished,\r\n        uint256 drawTimestamp\r\n    ) external view returns (string memory) {\r\n        return (\r\n            string(\r\n                abi.encodePacked(\r\n                    '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 2200 2200\" style=\"background-color:',\r\n                    backgroundColors[tokenId % backgroundColors.length],\r\n                    '\">',\r\n                    defs1,\r\n                    _generateRollingText(\r\n                        donationAmount,\r\n                        donationName,\r\n                        donationAddress,\r\n                        isBingoFinished,\r\n                        drawTimestamp\r\n                    ),\r\n                    defs2,\r\n                    styles,\r\n                    _generatePillPattern(tokenId),\r\n                    cardPattern,\r\n                    '<g><polygon style=\"stroke-width: 20\" points=\"200,500 200,1500 2000,1500 2000,500\"/>'\r\n                    '<rect fill=\"url(#bg)\" x=\"200\" y=\"800\" width=\"1800\" height=\"600\"/>',\r\n                    _generateNumbers(numbers, covered),\r\n                    header,\r\n                    footer,\r\n                    \"</g></svg>\"\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function _generateRollingText(\r\n        uint256 donationAmount,\r\n        string memory donationName,\r\n        address donationAddress,\r\n        bool isBingoFinished,\r\n        uint256 drawTimestamp\r\n    ) internal view returns (string memory) {\r\n        // temp = unicode(\"Donating 0.05 ETH · Gitcoin Alpha Round · 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 · January 31, 2023\")\r\n        return (\r\n            string(\r\n                abi.encodePacked(\r\n                    isBingoFinished ? \"Donated \" : \"Donating \",\r\n                    _convertWEIToEtherInString(donationAmount),\r\n                    unicode\" · \",\r\n                    donationName,\r\n                    unicode\" · \",\r\n                    Strings.toHexString(uint256(uint160(donationAddress)), 20),\r\n                    unicode\" · \",\r\n                    _generateDate(drawTimestamp)\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function _generateDate(uint256 timestamp)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        uint256 year;\r\n        uint256 month;\r\n        uint256 day;\r\n        uint256 hour;\r\n        uint256 minute;\r\n\r\n        (year, month, day, hour, minute, ) = dateTimeContract\r\n            .timestampToDateTime(timestamp);\r\n\r\n        string memory minuteString;\r\n        string memory hourString;\r\n\r\n        if (minute < 10) {\r\n            minuteString = string(\r\n                abi.encodePacked(\"0\", Strings.toString(minute))\r\n            );\r\n        } else {\r\n            minuteString = Strings.toString(minute);\r\n        }\r\n\r\n        if (hour < 10) {\r\n            hourString = string(abi.encodePacked(\"0\", Strings.toString(hour)));\r\n        } else {\r\n            hourString = Strings.toString(hour);\r\n        }\r\n\r\n        return (\r\n            string(\r\n                abi.encodePacked(\r\n                    Months[month - 1],\r\n                    \" \",\r\n                    Strings.toString(day),\r\n                    \", \",\r\n                    Strings.toString(year),\r\n                    \" \",\r\n                    hourString,\r\n                    \":\",\r\n                    minuteString,\r\n                    \" UTC\"\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function _convertWEIToEtherInString(uint256 amount)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        string memory decimalPart;\r\n        string memory floatingPart;\r\n\r\n        decimalPart = Strings.toString(amount / 1 ether);\r\n\r\n        if (amount % 1 ether == 0) {\r\n            floatingPart = \".00\";\r\n        } else {\r\n            bytes memory fpart = bytes(Strings.toString(amount % 1 ether));\r\n            uint256 numberOfZeroes = 18 - fpart.length;\r\n\r\n            bool isFirstNonZeroSeen = false;\r\n\r\n            for (uint256 i = fpart.length; i > 0; i--) {\r\n                if (fpart[i - 1] != bytes1(\"0\")) {\r\n                    isFirstNonZeroSeen = true;\r\n                }\r\n                if (isFirstNonZeroSeen) {\r\n                    floatingPart = string(\r\n                        abi.encodePacked(fpart[i - 1], floatingPart)\r\n                    );\r\n                }\r\n            }\r\n\r\n            for (uint256 i = 0; i < numberOfZeroes; i++) {\r\n                floatingPart = string(abi.encodePacked(\"0\", floatingPart));\r\n            }\r\n            floatingPart = string(abi.encodePacked(\".\", floatingPart));\r\n        }\r\n        return string(abi.encodePacked(decimalPart, floatingPart, \" ETH\"));\r\n    }\r\n\r\n    function _generateNumbers(\r\n        uint256[9][3] calldata numbers,\r\n        bool[9][3] calldata covered\r\n    ) internal pure returns (string memory) {\r\n        string memory output;\r\n        for (uint256 i = 0; i < 3; i++) {\r\n            for (uint256 j = 0; j < 9; j++) {\r\n                if (numbers[i][j] > 0) {\r\n                    output = string(\r\n                        abi.encodePacked(\r\n                            output,\r\n                            _generateNumberSVG(\r\n                                i,\r\n                                j,\r\n                                numbers[i][j],\r\n                                covered[i][j]\r\n                            )\r\n                        )\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n\r\n    function _generateNumberSVG(\r\n        uint256 y,\r\n        uint256 x,\r\n        uint256 number,\r\n        bool covered\r\n    ) internal pure returns (string memory) {\r\n        string memory output;\r\n        string memory xCordinate;\r\n        string memory yCordinate;\r\n        string memory circleX = Strings.toString(x * 200 + circleXOffset);\r\n        string memory circleY = Strings.toString(y * 200 + circleYOffset);\r\n\r\n        if (number < 10) {\r\n            xCordinate = Strings.toString(x * 200 + xOffset + 35);\r\n        } else {\r\n            xCordinate = Strings.toString(x * 200 + xOffset);\r\n        }\r\n        yCordinate = Strings.toString(y * 200 + yOffset);\r\n\r\n        if (covered) {\r\n            output = string(\r\n                abi.encodePacked(\r\n                    '<circle fill=\"#ee2d25\" cx=\"',\r\n                    circleX,\r\n                    '\" cy=\"',\r\n                    circleY,\r\n                    ' \"r=\"75\"></circle>'\r\n                )\r\n            );\r\n        }\r\n\r\n        output = string(\r\n            abi.encodePacked(\r\n                output,\r\n                '<text x=\"',\r\n                xCordinate,\r\n                '\" y=\"',\r\n                yCordinate,\r\n                '\">',\r\n                Strings.toString(number),\r\n                \"</text>\"\r\n            )\r\n        );\r\n\r\n        return output;\r\n    }\r\n\r\n    function _generatePillPattern(uint256 tokenId)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '<use href=\"#pbg\" class=\"rotate\" transform=\"rotate(',\r\n                    Strings.toString(\r\n                        uint256(keccak256(abi.encodePacked(tokenId))) % 360\r\n                    ),\r\n                    ' 1100 1100)\"/>'\r\n                )\r\n            );\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}