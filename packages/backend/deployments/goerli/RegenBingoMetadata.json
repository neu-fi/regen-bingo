{
  "address": "0x550e2c1C1dAaF33366FCea885Ec5710858654995",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_svgGeneratorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "generateContractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[9][3]",
          "name": "numbers",
          "type": "uint256[9][3]"
        },
        {
          "internalType": "bool[9][3]",
          "name": "covered",
          "type": "bool[9][3]"
        }
      ],
      "name": "generateTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "svgGenerator",
      "outputs": [
        {
          "internalType": "contract IRegenBingoSVG",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9f331764f5e6566cc10c3c5d227b895ce0dbc581759222ade28adf78a2930b9",
  "receipt": {
    "to": null,
    "from": "0xc4c302f0d81F3E9a86d468f585dAe26F92D9F5EA",
    "contractAddress": "0x550e2c1C1dAaF33366FCea885Ec5710858654995",
    "transactionIndex": 97,
    "gasUsed": "1011718",
    "logsBloom": "0x
    "blockHash": "0xebfeb4fe5cf69c1880dea8ce99d645d5c7a4c49f8154b2b0f4cd88ddebb642f2",
    "transactionHash": "0xc9f331764f5e6566cc10c3c5d227b895ce0dbc581759222ade28adf78a2930b9",
    "logs": [],
    "blockNumber": 8344492,
    "cumulativeGasUsed": "12799443",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x738f9F7F1916219dE3BEF85694584d2815d19219"
  ],
  "numDeployments": 2,
  "solcInputHash": "1962963bf5be03326ffe8220b7bfe71c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_svgGeneratorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"generateContractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[9][3]\",\"name\":\"numbers\",\"type\":\"uint256[9][3]\"},{\"internalType\":\"bool[9][3]\",\"name\":\"covered\",\"type\":\"bool[9][3]\"}],\"name\":\"generateTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgGenerator\",\"outputs\":[{\"internalType\":\"contract IRegenBingoSVG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RegenBingoMetadata.sol\":\"RegenBingoMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/RegenBingoMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./interfaces/IRegenBingoSVG.sol\\\";\\nimport \\\"./interfaces/IRegenBingoMetadata.sol\\\";\\n\\ncontract RegenBingoMetadata is IRegenBingoMetadata {\\n    IRegenBingoSVG public svgGenerator;\\n\\n    constructor(address _svgGeneratorAddress) {\\n        svgGenerator = IRegenBingoSVG(_svgGeneratorAddress);\\n    }\\n\\n    function generateTokenURI(\\n        uint256 tokenId,\\n        uint256[9][3] calldata numbers,\\n        bool[9][3] calldata covered\\n    ) external view returns (string memory) {\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\":\\\"RegenBingo #',\\n                        Strings.toString(tokenId),\\n                        '\\\",\\\"description\\\":\\\"...\\\",\\\"image\\\":\\\"',\\n                        _generateImageStringFraction(tokenId, numbers, covered),\\n                        '\\\"}'\\n                    )\\n                )\\n            )\\n        );\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n\\n    function generateContractURI() external pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        '{\\\"name\\\":\\\"RegenBingo\\\",\\\"description\\\":\\\"RegenBingo is a simple experimental game to raise ETH for public goods funding while entertaining us greenpilled regens.\\\",\\\"image\\\":\\\"...\\\",\\\"external_url\\\":\\\"https://www.regen.bingo\\\"}'\\n                    )\\n                )\\n            );\\n    }\\n    function _generateImageStringFraction(\\n        uint256 tokenId,\\n        uint256[9][3] calldata numbers,\\n        bool[9][3] calldata covered\\n    ) internal view returns (string memory) {\\n        string memory svg = svgGenerator.generateTokenSVG(tokenId, numbers, covered);\\n        return string(\\n            abi.encodePacked(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64.encode(bytes(svg))\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x415b39bae5d4559ef3055462f158839c346fb08bbcebed4dc26f6c5f9e81c19f\",\"license\":\"MIT\"},\"contracts/interfaces/IRegenBingoMetadata.sol\":{\"content\":\"interface IRegenBingoMetadata {\\n    function generateTokenURI(\\n        uint256 tokenId,\\n        uint256[9][3] calldata numbers,\\n        bool[9][3] calldata covered\\n    ) external view virtual returns (string memory);\\n\\n    function generateContractURI() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xdf319d2d5cb1680032575bc9669223861eed3d2fc6ca13649ffca428dfc1f173\"},\"contracts/interfaces/IRegenBingoSVG.sol\":{\"content\":\"interface IRegenBingoSVG {\\n    function generateTokenSVG(\\n        uint256 tokenId,\\n        uint256[9][3] calldata numbers,\\n        bool[9][3] calldata covered\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa05bb2fda8d9151e1edb80021b31c5e6e8870b64058b668d9b1f37c6ecfda131\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001210380380620012108339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b6110e6806200012a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635b23dd11146100465780636d6060f5146100765780639f4475da14610094575b600080fd5b610060600480360381019061005b919061067f565b6100b2565b60405161006d9190610764565b60405180910390f35b61007e61011e565b60405161008b9190610805565b60405180910390f35b61009c610142565b6040516100a99190610764565b60405180910390f35b606060006100f26100c28661018a565b6100cd878787610258565b6040516020016100de929190610940565b604051602081830303815290604052610334565b90508060405160200161010591906109d1565b6040516020818303038152906040529150509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606061016660405180610100016040528060d58152602001610fdc60d59139610334565b60405160200161017691906109d1565b604051602081830303815290604052905090565b60606000600161019984610497565b01905060008167ffffffffffffffff8111156101b8576101b76109f3565b5b6040519080825280601f01601f1916602001820160405280156101ea5781602001600182028036833780820191505090505b509050600082602001820190505b60011561024d578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161024157610240610a22565b5b049450600085036101f8575b819350505050919050565b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb55709c8686866040518463ffffffff1660e01b81526004016102ba93929190610cde565b600060405180830381865afa1580156102d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103009190610e0e565b905061030b81610334565b60405160200161031b9190610ea3565b6040516020818303038152906040529150509392505050565b6060600082510361035657604051806020016040528060008152509050610492565b6000604051806060016040528060408152602001610f9c60409139905060006003600285516103859190610ef4565b61038f9190610f28565b600461039b9190610f59565b67ffffffffffffffff8111156103b4576103b36109f3565b5b6040519080825280601f01601f1916602001820160405280156103e65781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015610452576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453600184019350506103f7565b505060038651066001811461046e576002811461048157610489565b603d6001830353603d6002830353610489565b603d60018303535b50505080925050505b919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106104f5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816104eb576104ea610a22565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610532576d04ee2d6d415b85acef8100000000838161052857610527610a22565b5b0492506020810190505b662386f26fc10000831061056157662386f26fc10000838161055757610556610a22565b5b0492506010810190505b6305f5e100831061058a576305f5e10083816105805761057f610a22565b5b0492506008810190505b61271083106105af5761271083816105a5576105a4610a22565b5b0492506004810190505b606483106105d257606483816105c8576105c7610a22565b5b0492506002810190505b600a83106105e1576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610611816105fe565b811461061c57600080fd5b50565b60008135905061062e81610608565b92915050565b600080fd5b6000819050826101206003028201111561065657610655610634565b5b92915050565b6000819050826101206003028201111561067957610678610634565b5b92915050565b60008060006106e08486031215610699576106986105f4565b5b60006106a78682870161061f565b93505060206106b886828701610639565b9250506103806106ca8682870161065c565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561070e5780820151818401526020810190506106f3565b60008484015250505050565b6000601f19601f8301169050919050565b6000610736826106d4565b61074081856106df565b93506107508185602086016106f0565b6107598161071a565b840191505092915050565b6000602082019050818103600083015261077e818461072b565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107cb6107c66107c184610786565b6107a6565b610786565b9050919050565b60006107dd826107b0565b9050919050565b60006107ef826107d2565b9050919050565b6107ff816107e4565b82525050565b600060208201905061081a60008301846107f6565b92915050565b600081905092915050565b7f7b226e616d65223a22526567656e42696e676f20230000000000000000000000600082015250565b6000610861601583610820565b915061086c8261082b565b601582019050919050565b6000610882826106d4565b61088c8185610820565b935061089c8185602086016106f0565b80840191505092915050565b7f222c226465736372697074696f6e223a222e2e2e222c22696d616765223a2200600082015250565b60006108de601f83610820565b91506108e9826108a8565b601f82019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061092a600283610820565b9150610935826108f4565b600282019050919050565b600061094b82610854565b91506109578285610877565b9150610962826108d1565b915061096e8284610877565b91506109798261091d565b91508190509392505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b60006109bb601d83610820565b91506109c682610985565b601d82019050919050565b60006109dc826109ae565b91506109e88284610877565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610a5a816105fe565b82525050565b600060039050919050565b600081905092915050565b6000819050919050565b82818337505050565b610a966101208383610a80565b5050565b6000610aa68383610a89565b6101208301905092915050565b600082905092915050565b600061012082019050919050565b610ad581610a60565b610adf8184610a6b565b9250610aea82610a76565b8060005b83811015610b2357610b008284610ab3565b610b0a8782610a9a565b9650610b1583610abe565b925050600181019050610aee565b505050505050565b600060039050919050565b600081905092915050565b6000819050919050565b600060099050919050565b600081905092915050565b6000819050919050565b60008115159050919050565b610b8081610b6b565b82525050565b6000610b928383610b77565b60208301905092915050565b610ba781610b6b565b8114610bb257600080fd5b50565b600081359050610bc481610b9e565b92915050565b6000610bd96020840184610bb5565b905092915050565b6000602082019050919050565b610bf781610b4b565b610c018184610b56565b9250610c0c82610b61565b8060005b83811015610c4557610c228284610bca565b610c2c8782610b86565b9650610c3783610be1565b925050600181019050610c10565b505050505050565b6000610c598383610bee565b6101208301905092915050565b600082905092915050565b600061012082019050919050565b610c8881610b2b565b610c928184610b36565b9250610c9d82610b41565b8060005b83811015610cd657610cb38284610c66565b610cbd8782610c4d565b9650610cc883610c71565b925050600181019050610ca1565b505050505050565b60006106e082019050610cf46000830186610a51565b610d016020830185610acc565b610d0f610380830184610c7f565b949350505050565b600080fd5b600080fd5b610d2a8261071a565b810181811067ffffffffffffffff82111715610d4957610d486109f3565b5b80604052505050565b6000610d5c6105ea565b9050610d688282610d21565b919050565b600067ffffffffffffffff821115610d8857610d876109f3565b5b610d918261071a565b9050602081019050919050565b6000610db1610dac84610d6d565b610d52565b905082815260208101848484011115610dcd57610dcc610d1c565b5b610dd88482856106f0565b509392505050565b600082601f830112610df557610df4610d17565b5b8151610e05848260208601610d9e565b91505092915050565b600060208284031215610e2457610e236105f4565b5b600082015167ffffffffffffffff811115610e4257610e416105f9565b5b610e4e84828501610de0565b91505092915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b6000610e8d601a83610820565b9150610e9882610e57565b601a82019050919050565b6000610eae82610e80565b9150610eba8284610877565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eff826105fe565b9150610f0a836105fe565b9250828201905080821115610f2257610f21610ec5565b5b92915050565b6000610f33826105fe565b9150610f3e836105fe565b925082610f4e57610f4d610a22565b5b828204905092915050565b6000610f64826105fe565b9150610f6f836105fe565b9250828202610f7d816105fe565b91508282048414831517610f9457610f93610ec5565b5b509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f7b226e616d65223a22526567656e42696e676f222c226465736372697074696f6e223a22526567656e42696e676f20697320612073696d706c65206578706572696d656e74616c2067616d6520746f2072616973652045544820666f72207075626c696320676f6f64732066756e64696e67207768696c6520656e7465727461696e696e6720757320677265656e70696c6c656420726567656e732e222c22696d616765223a222e2e2e222c2265787465726e616c5f75726c223a2268747470733a2f2f7777772e726567656e2e62696e676f227da26469706673582212204554e4092f14e033e62772f225d75fea03c5b6a131c11dd0758b0853cefffe8e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80635b23dd11146100465780636d6060f5146100765780639f4475da14610094575b600080fd5b610060600480360381019061005b919061067f565b6100b2565b60405161006d9190610764565b60405180910390f35b61007e61011e565b60405161008b9190610805565b60405180910390f35b61009c610142565b6040516100a99190610764565b60405180910390f35b606060006100f26100c28661018a565b6100cd878787610258565b6040516020016100de929190610940565b604051602081830303815290604052610334565b90508060405160200161010591906109d1565b6040516020818303038152906040529150509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606061016660405180610100016040528060d58152602001610fdc60d59139610334565b60405160200161017691906109d1565b604051602081830303815290604052905090565b60606000600161019984610497565b01905060008167ffffffffffffffff8111156101b8576101b76109f3565b5b6040519080825280601f01601f1916602001820160405280156101ea5781602001600182028036833780820191505090505b509050600082602001820190505b60011561024d578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161024157610240610a22565b5b049450600085036101f8575b819350505050919050565b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb55709c8686866040518463ffffffff1660e01b81526004016102ba93929190610cde565b600060405180830381865afa1580156102d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103009190610e0e565b905061030b81610334565b60405160200161031b9190610ea3565b6040516020818303038152906040529150509392505050565b6060600082510361035657604051806020016040528060008152509050610492565b6000604051806060016040528060408152602001610f9c60409139905060006003600285516103859190610ef4565b61038f9190610f28565b600461039b9190610f59565b67ffffffffffffffff8111156103b4576103b36109f3565b5b6040519080825280601f01601f1916602001820160405280156103e65781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015610452576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453600184019350506103f7565b505060038651066001811461046e576002811461048157610489565b603d6001830353603d6002830353610489565b603d60018303535b50505080925050505b919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106104f5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816104eb576104ea610a22565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610532576d04ee2d6d415b85acef8100000000838161052857610527610a22565b5b0492506020810190505b662386f26fc10000831061056157662386f26fc10000838161055757610556610a22565b5b0492506010810190505b6305f5e100831061058a576305f5e10083816105805761057f610a22565b5b0492506008810190505b61271083106105af5761271083816105a5576105a4610a22565b5b0492506004810190505b606483106105d257606483816105c8576105c7610a22565b5b0492506002810190505b600a83106105e1576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610611816105fe565b811461061c57600080fd5b50565b60008135905061062e81610608565b92915050565b600080fd5b6000819050826101206003028201111561065657610655610634565b5b92915050565b6000819050826101206003028201111561067957610678610634565b5b92915050565b60008060006106e08486031215610699576106986105f4565b5b60006106a78682870161061f565b93505060206106b886828701610639565b9250506103806106ca8682870161065c565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561070e5780820151818401526020810190506106f3565b60008484015250505050565b6000601f19601f8301169050919050565b6000610736826106d4565b61074081856106df565b93506107508185602086016106f0565b6107598161071a565b840191505092915050565b6000602082019050818103600083015261077e818461072b565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107cb6107c66107c184610786565b6107a6565b610786565b9050919050565b60006107dd826107b0565b9050919050565b60006107ef826107d2565b9050919050565b6107ff816107e4565b82525050565b600060208201905061081a60008301846107f6565b92915050565b600081905092915050565b7f7b226e616d65223a22526567656e42696e676f20230000000000000000000000600082015250565b6000610861601583610820565b915061086c8261082b565b601582019050919050565b6000610882826106d4565b61088c8185610820565b935061089c8185602086016106f0565b80840191505092915050565b7f222c226465736372697074696f6e223a222e2e2e222c22696d616765223a2200600082015250565b60006108de601f83610820565b91506108e9826108a8565b601f82019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061092a600283610820565b9150610935826108f4565b600282019050919050565b600061094b82610854565b91506109578285610877565b9150610962826108d1565b915061096e8284610877565b91506109798261091d565b91508190509392505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b60006109bb601d83610820565b91506109c682610985565b601d82019050919050565b60006109dc826109ae565b91506109e88284610877565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610a5a816105fe565b82525050565b600060039050919050565b600081905092915050565b6000819050919050565b82818337505050565b610a966101208383610a80565b5050565b6000610aa68383610a89565b6101208301905092915050565b600082905092915050565b600061012082019050919050565b610ad581610a60565b610adf8184610a6b565b9250610aea82610a76565b8060005b83811015610b2357610b008284610ab3565b610b0a8782610a9a565b9650610b1583610abe565b925050600181019050610aee565b505050505050565b600060039050919050565b600081905092915050565b6000819050919050565b600060099050919050565b600081905092915050565b6000819050919050565b60008115159050919050565b610b8081610b6b565b82525050565b6000610b928383610b77565b60208301905092915050565b610ba781610b6b565b8114610bb257600080fd5b50565b600081359050610bc481610b9e565b92915050565b6000610bd96020840184610bb5565b905092915050565b6000602082019050919050565b610bf781610b4b565b610c018184610b56565b9250610c0c82610b61565b8060005b83811015610c4557610c228284610bca565b610c2c8782610b86565b9650610c3783610be1565b925050600181019050610c10565b505050505050565b6000610c598383610bee565b6101208301905092915050565b600082905092915050565b600061012082019050919050565b610c8881610b2b565b610c928184610b36565b9250610c9d82610b41565b8060005b83811015610cd657610cb38284610c66565b610cbd8782610c4d565b9650610cc883610c71565b925050600181019050610ca1565b505050505050565b60006106e082019050610cf46000830186610a51565b610d016020830185610acc565b610d0f610380830184610c7f565b949350505050565b600080fd5b600080fd5b610d2a8261071a565b810181811067ffffffffffffffff82111715610d4957610d486109f3565b5b80604052505050565b6000610d5c6105ea565b9050610d688282610d21565b919050565b600067ffffffffffffffff821115610d8857610d876109f3565b5b610d918261071a565b9050602081019050919050565b6000610db1610dac84610d6d565b610d52565b905082815260208101848484011115610dcd57610dcc610d1c565b5b610dd88482856106f0565b509392505050565b600082601f830112610df557610df4610d17565b5b8151610e05848260208601610d9e565b91505092915050565b600060208284031215610e2457610e236105f4565b5b600082015167ffffffffffffffff811115610e4257610e416105f9565b5b610e4e84828501610de0565b91505092915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b6000610e8d601a83610820565b9150610e9882610e57565b601a82019050919050565b6000610eae82610e80565b9150610eba8284610877565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eff826105fe565b9150610f0a836105fe565b9250828201905080821115610f2257610f21610ec5565b5b92915050565b6000610f33826105fe565b9150610f3e836105fe565b925082610f4e57610f4d610a22565b5b828204905092915050565b6000610f64826105fe565b9150610f6f836105fe565b9250828202610f7d816105fe565b91508282048414831517610f9457610f93610ec5565b5b509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f7b226e616d65223a22526567656e42696e676f222c226465736372697074696f6e223a22526567656e42696e676f20697320612073696d706c65206578706572696d656e74616c2067616d6520746f2072616973652045544820666f72207075626c696320676f6f64732066756e64696e67207768696c6520656e7465727461696e696e6720757320677265656e70696c6c656420726567656e732e222c22696d616765223a222e2e2e222c2265787465726e616c5f75726c223a2268747470733a2f2f7777772e726567656e2e62696e676f227da26469706673582212204554e4092f14e033e62772f225d75fea03c5b6a131c11dd0758b0853cefffe8e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1097,
        "contract": "contracts/RegenBingoMetadata.sol:RegenBingoMetadata",
        "label": "svgGenerator",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IRegenBingoSVG)1275"
      }
    ],
    "types": {
      "t_contract(IRegenBingoSVG)1275": {
        "encoding": "inplace",
        "label": "contract IRegenBingoSVG",
        "numberOfBytes": "20"
      }
    }
  }
}