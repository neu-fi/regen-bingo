{
  "address": "0x0EDfe499b3bC84A9c83967EF881298Bf21280Cab",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[9][3]",
          "name": "numbers",
          "type": "uint256[9][3]"
        },
        {
          "internalType": "bool[9][3]",
          "name": "covered",
          "type": "bool[9][3]"
        }
      ],
      "name": "generateTokenSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7de84c18a95bc812c2f645c03493e6ac7eade9563136480c00e08bbfecb34c0b",
  "receipt": {
    "to": null,
    "from": "0xc4c302f0d81F3E9a86d468f585dAe26F92D9F5EA",
    "contractAddress": "0x0EDfe499b3bC84A9c83967EF881298Bf21280Cab",
    "transactionIndex": 28,
    "gasUsed": "2605397",
    "logsBloom": "0x
    "blockHash": "0x3224568cd298f31918ed75dfdc1ffbfd9b47c82e28ae4b9b808f2a9330473fe8",
    "transactionHash": "0x7de84c18a95bc812c2f645c03493e6ac7eade9563136480c00e08bbfecb34c0b",
    "logs": [],
    "blockNumber": 8339636,
    "cumulativeGasUsed": "8733376",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0b2aee25e40dd5097a2b03f0297003b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[9][3]\",\"name\":\"numbers\",\"type\":\"uint256[9][3]\"},{\"internalType\":\"bool[9][3]\",\"name\":\"covered\",\"type\":\"bool[9][3]\"}],\"name\":\"generateTokenSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RegenBingoSVG.sol\":\"RegenBingoSVG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/RegenBingoSVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./interfaces/IRegenBingoSVG.sol\\\";\\n\\ncontract RegenBingoSVG is IRegenBingoSVG {\\n    uint256 constant xOffset = 240;\\n    uint256 constant yOffset = 935;\\n    uint256 constant circleXOffset = 300;\\n    uint256 constant circleYOffset = 900;\\n    string[18] backgroundColors = [\\n        \\\"#297739\\\",\\n        \\\"#4B9074\\\",\\n        \\\"#496851\\\",\\n        \\\"#7C7451\\\",\\n        \\\"#E0BB44\\\",\\n        \\\"#A0B59E\\\",\\n        \\\"#A4A57A\\\",\\n        \\\"#ffe5b4\\\",\\n        \\\"#5f9ea0\\\",\\n        \\\"#d2b48c\\\",\\n        \\\"#D0C4AB\\\",\\n        \\\"#f5f5dc\\\",\\n        \\\"#ffefd5\\\",\\n        \\\"#BAB86C\\\",\\n        \\\"#ffdab9\\\",\\n        \\\"#dcae96\\\",\\n        \\\"#b57170\\\",\\n        \\\"#A0522D\\\"\\n    ];\\n\\n    string constant defs =\\n        string(\\n            abi.encodePacked(\\n                \\\"<defs>\\\",\\n                '<path id=\\\"text-path-a\\\" d=\\\"M0 0 L5400 0 Z\\\"/>',\\n                '<text id=\\\"rolling-text-right\\\" text-rendering=\\\"optimizeSpeed\\\">',\\n                '<textPath xlink:href=\\\"#text-path-a\\\" textLength=\\\"1600\\\" font-size=\\\"35\\\" font-weight=\\\"500\\\">',\\n                unicode\\\"Gitcoin Alpha Round \\u00b7 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 \\u00b7 January 31, 2023\\\",\\n                '<animate attributeName=\\\"startOffset\\\" values=\\\"0; 1700\\\" dur=\\\"20s\\\" repeatCount=\\\"indefinite\\\"/> ',\\n                \\\"</textPath>\\\",\\n                \\\"</text>\\\",\\n                \\\"</defs>\\\"\\n            )\\n        );\\n\\n    string constant styles =\\n        string(\\n            abi.encodePacked(\\n                \\\"<style>\\\",\\n                \\\"text {\\\",\\n                \\\"font-family: Monaco;\\\",\\n                \\\"font-size:100px;\\\",\\n                \\\"font-weight:500;}\\\",\\n                \\\"polygon {\\\",\\n                \\\"stroke:black; stroke-width:1;}\\\",\\n                \\\".a{\\\",\\n                \\\"fill:#57b592;}\\\",\\n                \\\".b{\\\",\\n                \\\"fill:#bde4df;}\\\",\\n                \\\"</style>\\\"\\n            )\\n        );\\n\\n    string constant cardPattern =\\n        string(\\n            abi.encodePacked(\\n                '<pattern id=\\\"bg\\\" width=\\\"0.111111111111\\\" height=\\\"0.333333333333\\\">',\\n                '<polygon points=\\\"0,0 0,200 200,200\\\" style=\\\"fill:#57b592; stroke:black; stroke-width:1\\\"/>',\\n                '<polygon points=\\\"0,0 200,0 200,200\\\" style=\\\"fill:#f8ce47; stroke:black; stroke-width:1\\\"/>',\\n                '<rect id=\\\"x\\\" x=\\\"20\\\" y=\\\"20\\\" width=\\\"160\\\" height=\\\"160\\\" style=\\\"fill: #fcf2b1; stroke:black ; stroke-width:1\\\"/>'\\n                \\\"</pattern>\\\"\\n            )\\n        );\\n\\n    string constant header =\\n        string(\\n            abi.encodePacked(\\n                '<polygon class=\\\"b\\\" points=\\\"200,500 200,800 2000,800 2000,500\\\" />',\\n                '<polygon class=\\\"a\\\" points=\\\"200,500 200,800 350,650\\\" style=\\\"fill:#f8ce47\\\"/>',\\n                '<polygon class=\\\"a\\\" points=\\\"2000,500 2000,800 1850,650\\\" style=\\\"fill:#f8ce47\\\"/>',\\n                '<rect id=\\\"x\\\" x=\\\"220\\\" y=\\\"520\\\" width=\\\"1760\\\" height=\\\"260\\\" style=\\\"fill: #fcf2b1; stroke:black; stroke-width:1\\\"/>',\\n                '<text x=\\\"700\\\" y=\\\"710\\\" style=\\\"font-size:150\\\">Regen Bingo</text>'\\n            )\\n        );\\n\\n    string constant footer =\\n        string(\\n            abi.encodePacked(\\n                '<polygon class=\\\"b\\\" points=\\\"200,1400 200,1500 2000,1500 2000,1400\\\"/>',\\n                '<polygon class=\\\"a\\\" points=\\\"200,1400 200,1500 250,1450\\\"/>',\\n                '<polygon class=\\\"a\\\" points=\\\"2000,1400 2000,1500 1950,1450\\\"/>',\\n                '<rect id=\\\"x\\\" x=\\\"220\\\" y=\\\"1420\\\" width=\\\"1760\\\" height=\\\"60\\\" style=\\\"fill: #fcf2b1; stroke:black; stroke-width:1\\\"/>',\\n                '<clipPath id=\\\"clip\\\">',\\n                '<rect x=\\\"230\\\" y=\\\"1420\\\" width=\\\"1740\\\" height=\\\"60\\\"/>',\\n                \\\"</clipPath>\\\",\\n                '<g clip-path=\\\"url(#clip)\\\">',\\n                '<use x=\\\"-1400\\\" y=\\\"1460\\\" href=\\\"#rolling-text-right\\\"/>',\\n                '<use x=\\\"300\\\" y=\\\"1460\\\" href=\\\"#rolling-text-right\\\"/>',\\n                \\\"</g>\\\"\\n            )\\n        );\\n\\n    function generateTokenSVG(\\n        uint256 tokenId,\\n        uint256[9][3] calldata numbers,\\n        bool[9][3] calldata covered\\n    ) external view returns (string memory) {\\n        string memory background;\\n        string memory bgColor = backgroundColors[tokenId % backgroundColors.length];\\n\\n        background = string(\\n            abi.encodePacked(\\n                \\\"<rect fill=\\\",\\n                '\\\"',\\n                bgColor,\\n                '\\\"',\\n                'x=\\\"0\\\" y=\\\"0\\\" width=\\\"2200\\\" height=\\\"2200\\\"/>'\\n            )\\n        );\\n\\n        return (\\n            string(\\n                abi.encodePacked(\\n                    '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 2200 2200\\\">',\\n                    defs,\\n                    styles,\\n                    background,\\n                    cardPattern,\\n                    \\\"<g>\\\",\\n                    '<rect fill=\\\"url(#bg)\\\" x=\\\"200\\\" y=\\\"800\\\" width=\\\"1800\\\" height=\\\"600\\\"/>',\\n                    '<animateTransform attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" type=\\\"rotate\\\" values=\\\"1;-1;1\\\" dur=\\\"19s\\\" repeatCount=\\\"indefinite\\\"/>',\\n                    '<animateMotion dur=\\\"27s\\\" repeatCount=\\\"indefinite\\\" path=\\\"M20,50 C20,-50 180,150 180,50 C180-50 20,150 20,50 z\\\"/>',\\n                    _generateNumbers(numbers, covered),\\n                    header,\\n                    footer,\\n                    \\\"</g>\\\",\\n                    \\\"</svg>\\\"\\n                )\\n            )\\n        );\\n    }\\n\\n    function _generateNumbers(\\n        uint256[9][3] calldata numbers,\\n        bool[9][3] calldata covered\\n    ) internal pure returns (string memory) {\\n        string memory output;\\n        for (uint256 i = 0; i < 3; i++) {\\n            for (uint256 j = 0; j < 9; j++) {\\n                if (numbers[i][j] > 0) {\\n                    output = string(\\n                        abi.encodePacked(\\n                            output,\\n                            _generateNumberSVG(\\n                                i,\\n                                j,\\n                                numbers[i][j],\\n                                covered[i][j]\\n                            )\\n                        )\\n                    );\\n                }\\n            }\\n        }\\n        return output;\\n    }\\n\\n    function _generateNumberSVG(\\n        uint256 y,\\n        uint256 x,\\n        uint256 number,\\n        bool covered\\n    ) internal pure returns (string memory) {\\n        string memory output;\\n        string memory xCordinate;\\n        string memory yCordinate;\\n        string memory circleX = Strings.toString(x * 200 + circleXOffset);\\n        string memory circleY = Strings.toString(y * 200 + circleYOffset);\\n\\n        if (number < 10) {\\n            xCordinate = Strings.toString(x * 200 + xOffset + 35);\\n        } else {\\n            xCordinate = Strings.toString(x * 200 + xOffset);\\n        }\\n        yCordinate = Strings.toString(y * 200 + yOffset);\\n\\n        if (covered) {\\n            output = string(\\n                abi.encodePacked(\\n                    '<circle fill=\\\"#ee2d25\\\" cx=',\\n                    '\\\"',\\n                    circleX,\\n                    '\\\"',\\n                    \\\"cy=\\\",\\n                    '\\\"',\\n                    circleY,\\n                    '\\\"',\\n                    'r=\\\"75\\\"></circle>'\\n                )\\n            );\\n        }\\n\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                \\\"<text x=\\\",\\n                '\\\"',\\n                xCordinate,\\n                '\\\"',\\n                \\\"y=\\\",\\n                '\\\"',\\n                yCordinate,\\n                '\\\"',\\n                \\\">\\\",\\n                Strings.toString(number),\\n                \\\"</text>\\\"\\n            )\\n        );\\n\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0xe1194365e427c5ea6ee7de4bc9b7fe31d7280df8e1b0f0e017cd845a4804152f\",\"license\":\"MIT\"},\"contracts/interfaces/IRegenBingoSVG.sol\":{\"content\":\"interface IRegenBingoSVG {\\n    function generateTokenSVG(\\n        uint256 tokenId,\\n        uint256[9][3] calldata numbers,\\n        bool[9][3] calldata covered\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa05bb2fda8d9151e1edb80021b31c5e6e8870b64058b668d9b1f37c6ecfda131\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1128,
        "contract": "contracts/RegenBingoSVG.sol:RegenBingoSVG",
        "label": "backgroundColors",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)18_storage"
      }
    ],
    "types": {
      "t_array(t_string_storage)18_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[18]",
        "numberOfBytes": "576"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}