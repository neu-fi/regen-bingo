{
  "address": "0x4398208AEf920ab4ca0CB2af8726f7aF7B8f5c54",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dateTimeContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[9][3]",
          "name": "numbers",
          "type": "uint256[9][3]"
        },
        {
          "internalType": "bool[9][3]",
          "name": "covered",
          "type": "bool[9][3]"
        },
        {
          "internalType": "uint256",
          "name": "donationAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "donationName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "donationAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isBingoFinished",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "drawTimestamp",
          "type": "uint256"
        }
      ],
      "name": "generateTokenSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x04562212ca6892f63242afea53026f72c63f89943ea20b9f230068a34ec83a12",
  "receipt": {
    "to": null,
    "from": "0x09cD0cC2d89F5FfB9d816106248166eD2Cd8C9Bc",
    "contractAddress": "0x4398208AEf920ab4ca0CB2af8726f7aF7B8f5c54",
    "transactionIndex": 36,
    "gasUsed": "4420955",
    "logsBloom": "0x
    "blockHash": "0x9d2efc6f8c520e51f238fccab5d32a3e089f1b7ecea522b4e1be66f827d7a2b7",
    "transactionHash": "0x04562212ca6892f63242afea53026f72c63f89943ea20b9f230068a34ec83a12",
    "logs": [],
    "blockNumber": 8363485,
    "cumulativeGasUsed": "12495490",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x85CC560EfebA375959B0FBA451cF4eBD1c8E6FA6"
  ],
  "numDeployments": 1,
  "solcInputHash": "6b891611c987b2e73bde0bfc8fd25a1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dateTimeContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[9][3]\",\"name\":\"numbers\",\"type\":\"uint256[9][3]\"},{\"internalType\":\"bool[9][3]\",\"name\":\"covered\",\"type\":\"bool[9][3]\"},{\"internalType\":\"uint256\",\"name\":\"donationAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"donationName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"donationAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBingoFinished\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"drawTimestamp\",\"type\":\"uint256\"}],\"name\":\"generateTokenSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RegenBingoSVG.sol\":\"RegenBingoSVG\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/RegenBingoSVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.16;\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\nimport \\\"./interfaces/IRegenBingoSVG.sol\\\";\\r\\nimport \\\"./interfaces/IDateTime.sol\\\";\\r\\n\\r\\ncontract RegenBingoSVG is IRegenBingoSVG {\\r\\n    uint256 constant xOffset = 240;\\r\\n    uint256 constant yOffset = 935;\\r\\n    uint256 constant circleXOffset = 300;\\r\\n    uint256 constant circleYOffset = 900;\\r\\n    string[40] backgroundColors = [\\r\\n        \\\"#5f9e80\\\",\\r\\n        \\\"#909F79\\\",\\r\\n        \\\"#9C9491\\\",\\r\\n        \\\"#A0B59E\\\",\\r\\n        \\\"#a3b18a\\\",\\r\\n        \\\"#A9B9A9\\\",\\r\\n        \\\"#b08968\\\",\\r\\n        \\\"#b1a7a6\\\",\\r\\n        \\\"#b57170\\\",\\r\\n        \\\"#b5e48c\\\",\\r\\n        \\\"#BAB86C\\\",\\r\\n        \\\"#c9ada7\\\",\\r\\n        \\\"#cad2c5\\\",\\r\\n        \\\"#cbf3f0\\\",\\r\\n        \\\"#ccd5ae\\\",\\r\\n        \\\"#cce3de\\\",\\r\\n        \\\"#D0C4AB\\\",\\r\\n        \\\"#d2b48c\\\",\\r\\n        \\\"#d4a373\\\",\\r\\n        \\\"#d5bdaf\\\",\\r\\n        \\\"#d9ed92\\\",\\r\\n        \\\"#dad7cd\\\",\\r\\n        \\\"#dcae96\\\",\\r\\n        \\\"#dda15e\\\",\\r\\n        \\\"#ddb892\\\",\\r\\n        \\\"#E0BB44\\\",\\r\\n        \\\"#e6ccb2\\\",\\r\\n        \\\"#e9d8a6\\\",\\r\\n        \\\"#e9edc9\\\",\\r\\n        \\\"#eaac8b\\\",\\r\\n        \\\"#eec643\\\",\\r\\n        \\\"#f2c078\\\",\\r\\n        \\\"#f5f5dc\\\",\\r\\n        \\\"#f7c59f\\\",\\r\\n        \\\"#fec89a\\\",\\r\\n        \\\"#ffb5a7\\\",\\r\\n        \\\"#ffc43d\\\",\\r\\n        \\\"#ffdab9\\\",\\r\\n        \\\"#ffe5b4\\\",\\r\\n        \\\"#ffefd5\\\"\\r\\n    ];\\r\\n    string[12] Months = [\\r\\n        \\\"January\\\",\\r\\n        \\\"February\\\",\\r\\n        \\\"March\\\",\\r\\n        \\\"April\\\",\\r\\n        \\\"May\\\",\\r\\n        \\\"June\\\",\\r\\n        \\\"July\\\",\\r\\n        \\\"August\\\",\\r\\n        \\\"September\\\",\\r\\n        \\\"October\\\",\\r\\n        \\\"November\\\",\\r\\n        \\\"December\\\"\\r\\n    ];\\r\\n\\r\\n    IDateTime dateTimeContract;\\r\\n\\r\\n    constructor(address _dateTimeContractAddress) {\\r\\n        dateTimeContract = IDateTime(_dateTimeContractAddress);\\r\\n    }\\r\\n\\r\\n    string constant defs1 =\\r\\n        string(\\r\\n            abi.encodePacked(\\r\\n                \\\"<defs>\\\",\\r\\n                '<g id=\\\"p\\\"><path fill=\\\"#02E2AC\\\" d=\\\"M10-0 10-16A1 1 0 00-10-16L-10 0z\\\"/><path fill=\\\"#B3FFED\\\" d=\\\"M-10 0-10 16A1 1 18 0010 16L10-0z\\\"/></g><g id=\\\"pbg\\\"><use href=\\\"#p\\\" transform=\\\"translate(1600 1733) rotate(130 442 41) scale(2,2)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(500 2133) rotate(44 11 555) scale(2,2)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(200 2200) rotate(20 200 200) scale(2,2)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(1000 315) rotate(130 442 41) scale(2,2)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(50 250) rotate(80 200 200) scale(2,2)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(444 888) rotate(160 400 400) scale(2,2)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(400 1700) rotate(40 67 124) scale(2,2)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(0 550) rotate(140 11 362) scale(2,2)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(0 1100) rotate(0 200 200) scale(3,3)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(1733 333) rotate(299 60 60) scale(3,3)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(1312 50) rotate(99 14 21) scale(3,3)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(2200 1993) rotate(11 414 241) scale(3,3)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(630 0) rotate(30 124 532) scale(3,3)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(1750 850) rotate(60 200 200) scale(3,3)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(0 0) rotate(310 595 381) scale(3,3)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(300 1100) rotate(180 491 372) scale(3,3)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(2150 650) rotate(320 713 321) scale(4,4)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(400 400) rotate(180 700 700) scale(4,4)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(10 155) rotate(280 412 132) scale(4,4)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(12 93) rotate(33 241 414) scale(4,4)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(250 1997) rotate(100 200 200) scale(4,4)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(1114 2141) rotate(51 11 410) scale(4,4)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(-162 1693) rotate(40 414 241) scale(4,4)\\\"/><use href=\\\"#p\\\" transform=\\\"translate(395 113) rotate(140 241 251) scale(4,4)\\\"/></g>',\\r\\n                '<path id=\\\"pt\\\" d=\\\"M0 0 L4800 0 Z\\\"/>',\\r\\n                '<text id=\\\"t\\\">',\\r\\n                '<textPath xlink:href=\\\"#pt\\\" textLength=\\\"2200\\\" font-size=\\\"35\\\">'\\r\\n            )\\r\\n        );\\r\\n\\r\\n    string constant defs2 =\\r\\n        string(\\r\\n            abi.encodePacked(\\r\\n                '<animate attributeName=\\\"startOffset\\\" values=\\\"2400; 0\\\" dur=\\\"9s\\\" repeatCount=\\\"indefinite\\\"/> ',\\r\\n                \\\"</textPath>\\\",\\r\\n                \\\"</text>\\\",\\r\\n                \\\"</defs>\\\"\\r\\n            )\\r\\n        );\\r\\n\\r\\n    string constant styles =\\r\\n        \\\"<style>text{font-family:Monaco;font-size:100px}svg{stroke:black;stroke-width:1}.a{fill:#57b592}.b{fill:#bde4df}.c{fill:#f8ce47}.d{fill:#fcf2b1}</style>\\\";\\r\\n\\r\\n    string constant cardPattern =\\r\\n        string(\\r\\n            abi.encodePacked(\\r\\n                '<pattern id=\\\"bg\\\" width=\\\"0.111111111111\\\" height=\\\"0.333333333333\\\">',\\r\\n                '<polygon class=\\\"a\\\" points=\\\"0,0 0,200 200,200\\\"/>',\\r\\n                '<polygon class=\\\"c\\\" points=\\\"0,0 200,0 200,200\\\"/>',\\r\\n                '<rect class=\\\"d\\\" x=\\\"20\\\" y=\\\"20\\\" width=\\\"160\\\" height=\\\"160\\\"/>'\\r\\n                \\\"</pattern>\\\"\\r\\n            )\\r\\n        );\\r\\n\\r\\n    string constant header =\\r\\n        string(\\r\\n            abi.encodePacked(\\r\\n                '<polygon class=\\\"b\\\" points=\\\"200,500 200,800 2000,800 2000,500\\\"/>',\\r\\n                '<polygon class=\\\"c\\\" points=\\\"200,500 200,800 350,650\\\"/>',\\r\\n                '<polygon class=\\\"c\\\" points=\\\"2000,500 2000,800 1850,650\\\"/>',\\r\\n                '<rect class=\\\"d\\\" x=\\\"220\\\" y=\\\"520\\\" width=\\\"1760\\\" height=\\\"260\\\"/>',\\r\\n                '<text x=\\\"1100\\\" y=\\\"650\\\" dominant-baseline=\\\"middle\\\" text-anchor=\\\"middle\\\" style=\\\"font-size:150\\\">Regen Bingo</text>'\\r\\n            )\\r\\n        );\\r\\n\\r\\n    string constant footer =\\r\\n        string(\\r\\n            abi.encodePacked(\\r\\n                '<polygon class=\\\"b\\\" points=\\\"200,1400 200,1500 2000,1500 2000,1400\\\"/>',\\r\\n                '<polygon class=\\\"a\\\" points=\\\"200,1400 200,1500 250,1450\\\"/>',\\r\\n                '<polygon class=\\\"a\\\" points=\\\"2000,1400 2000,1500 1950,1450\\\"/>',\\r\\n                '<rect class=\\\"d\\\" x=\\\"220\\\" y=\\\"1420\\\" width=\\\"1760\\\" height=\\\"60\\\"/>',\\r\\n                '<clipPath id=\\\"clip\\\">',\\r\\n                '<rect x=\\\"230\\\" y=\\\"1420\\\" width=\\\"1740\\\" height=\\\"60\\\"/>',\\r\\n                \\\"</clipPath>\\\",\\r\\n                '<g clip-path=\\\"url(#clip)\\\">',\\r\\n                '<use x=\\\"-1900\\\" y=\\\"1460\\\" href=\\\"#t\\\"/>',\\r\\n                '<use x=\\\"500\\\" y=\\\"1460\\\" href=\\\"#t\\\"/>',\\r\\n                \\\"</g>\\\"\\r\\n            )\\r\\n        );\\r\\n\\r\\n    function generateTokenSVG(\\r\\n        uint256 tokenId,\\r\\n        uint256[9][3] calldata numbers,\\r\\n        bool[9][3] calldata covered,\\r\\n        uint256 donationAmount,\\r\\n        string memory donationName,\\r\\n        address donationAddress,\\r\\n        bool isBingoFinished,\\r\\n        uint256 drawTimestamp\\r\\n    ) external view returns (string memory) {\\r\\n        return (\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 2200 2200\\\" style=\\\"background-color:',\\r\\n                    backgroundColors[tokenId % backgroundColors.length],\\r\\n                    '\\\">',\\r\\n                    defs1,\\r\\n                    _generateRollingText(\\r\\n                        donationAmount,\\r\\n                        donationName,\\r\\n                        donationAddress,\\r\\n                        isBingoFinished,\\r\\n                        drawTimestamp\\r\\n                    ),\\r\\n                    defs2,\\r\\n                    styles,\\r\\n                    _generatePillPattern(tokenId),\\r\\n                    cardPattern,\\r\\n                    '<g><polygon style=\\\"stroke-width: 20\\\" points=\\\"200,500 200,1500 2000,1500 2000,500\\\"/>'\\r\\n                    '<rect fill=\\\"url(#bg)\\\" x=\\\"200\\\" y=\\\"800\\\" width=\\\"1800\\\" height=\\\"600\\\"/>',\\r\\n                    _generateNumbers(numbers, covered),\\r\\n                    header,\\r\\n                    footer,\\r\\n                    \\\"</g></svg>\\\"\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _generateRollingText(\\r\\n        uint256 donationAmount,\\r\\n        string memory donationName,\\r\\n        address donationAddress,\\r\\n        bool isBingoFinished,\\r\\n        uint256 drawTimestamp\\r\\n    ) internal view returns (string memory) {\\r\\n        // temp = unicode(\\\"Donating 0.05 ETH \\u00b7 Gitcoin Alpha Round \\u00b7 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 \\u00b7 January 31, 2023\\\")\\r\\n        return (\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    isBingoFinished ? \\\"Donated \\\" : \\\"Donating \\\",\\r\\n                    _convertWEIToEtherInString(donationAmount),\\r\\n                    unicode\\\" \\u00b7 \\\",\\r\\n                    donationName,\\r\\n                    unicode\\\" \\u00b7 \\\",\\r\\n                    Strings.toHexString(uint256(uint160(donationAddress)), 20),\\r\\n                    unicode\\\" \\u00b7 \\\",\\r\\n                    _generateDate(drawTimestamp)\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _generateDate(uint256 timestamp)\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint256 year;\\r\\n        uint256 month;\\r\\n        uint256 day;\\r\\n        uint256 hour;\\r\\n        uint256 minute;\\r\\n\\r\\n        (year, month, day, hour, minute, ) = dateTimeContract\\r\\n            .timestampToDateTime(timestamp);\\r\\n\\r\\n        string memory minuteString;\\r\\n        string memory hourString;\\r\\n\\r\\n        if (minute < 10) {\\r\\n            minuteString = string(\\r\\n                abi.encodePacked(\\\"0\\\", Strings.toString(minute))\\r\\n            );\\r\\n        } else {\\r\\n            minuteString = Strings.toString(minute);\\r\\n        }\\r\\n\\r\\n        if (hour < 10) {\\r\\n            hourString = string(abi.encodePacked(\\\"0\\\", Strings.toString(hour)));\\r\\n        } else {\\r\\n            hourString = Strings.toString(hour);\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    Months[month - 1],\\r\\n                    \\\" \\\",\\r\\n                    Strings.toString(day),\\r\\n                    \\\", \\\",\\r\\n                    Strings.toString(year),\\r\\n                    \\\" \\\",\\r\\n                    hourString,\\r\\n                    \\\":\\\",\\r\\n                    minuteString,\\r\\n                    \\\" UTC\\\"\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _convertWEIToEtherInString(uint256 amount)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory decimalPart;\\r\\n        string memory floatingPart;\\r\\n\\r\\n        decimalPart = Strings.toString(amount / 1 ether);\\r\\n\\r\\n        if (amount % 1 ether == 0) {\\r\\n            floatingPart = \\\".00\\\";\\r\\n        } else {\\r\\n            bytes memory fpart = bytes(Strings.toString(amount % 1 ether));\\r\\n            uint256 numberOfZeroes = 18 - fpart.length;\\r\\n\\r\\n            bool isFirstNonZeroSeen = false;\\r\\n\\r\\n            for (uint256 i = fpart.length; i > 0; i--) {\\r\\n                if (fpart[i - 1] != bytes1(\\\"0\\\")) {\\r\\n                    isFirstNonZeroSeen = true;\\r\\n                }\\r\\n                if (isFirstNonZeroSeen) {\\r\\n                    floatingPart = string(\\r\\n                        abi.encodePacked(fpart[i - 1], floatingPart)\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (uint256 i = 0; i < numberOfZeroes; i++) {\\r\\n                floatingPart = string(abi.encodePacked(\\\"0\\\", floatingPart));\\r\\n            }\\r\\n            floatingPart = string(abi.encodePacked(\\\".\\\", floatingPart));\\r\\n        }\\r\\n        return string(abi.encodePacked(decimalPart, floatingPart, \\\" ETH\\\"));\\r\\n    }\\r\\n\\r\\n    function _generateNumbers(\\r\\n        uint256[9][3] calldata numbers,\\r\\n        bool[9][3] calldata covered\\r\\n    ) internal pure returns (string memory) {\\r\\n        string memory output;\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            for (uint256 j = 0; j < 9; j++) {\\r\\n                if (numbers[i][j] > 0) {\\r\\n                    output = string(\\r\\n                        abi.encodePacked(\\r\\n                            output,\\r\\n                            _generateNumberSVG(\\r\\n                                i,\\r\\n                                j,\\r\\n                                numbers[i][j],\\r\\n                                covered[i][j]\\r\\n                            )\\r\\n                        )\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    function _generateNumberSVG(\\r\\n        uint256 y,\\r\\n        uint256 x,\\r\\n        uint256 number,\\r\\n        bool covered\\r\\n    ) internal pure returns (string memory) {\\r\\n        string memory output;\\r\\n        string memory xCordinate;\\r\\n        string memory yCordinate;\\r\\n        string memory circleX = Strings.toString(x * 200 + circleXOffset);\\r\\n        string memory circleY = Strings.toString(y * 200 + circleYOffset);\\r\\n\\r\\n        if (number < 10) {\\r\\n            xCordinate = Strings.toString(x * 200 + xOffset + 35);\\r\\n        } else {\\r\\n            xCordinate = Strings.toString(x * 200 + xOffset);\\r\\n        }\\r\\n        yCordinate = Strings.toString(y * 200 + yOffset);\\r\\n\\r\\n        if (covered) {\\r\\n            output = string(\\r\\n                abi.encodePacked(\\r\\n                    '<circle fill=\\\"#ee2d25\\\" cx=\\\"',\\r\\n                    circleX,\\r\\n                    '\\\" cy=\\\"',\\r\\n                    circleY,\\r\\n                    ' \\\"r=\\\"75\\\"></circle>'\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n\\r\\n        output = string(\\r\\n            abi.encodePacked(\\r\\n                output,\\r\\n                '<text x=\\\"',\\r\\n                xCordinate,\\r\\n                '\\\" y=\\\"',\\r\\n                yCordinate,\\r\\n                '\\\">',\\r\\n                Strings.toString(number),\\r\\n                \\\"</text>\\\"\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return output;\\r\\n    }\\r\\n\\r\\n    function _generatePillPattern(uint256 tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '<use href=\\\"#pbg\\\" class=\\\"rotate\\\" transform=\\\"rotate(',\\r\\n                    Strings.toString(\\r\\n                        uint256(keccak256(abi.encodePacked(tokenId))) % 360\\r\\n                    ),\\r\\n                    ' 1100 1100)\\\"/>'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8c9e66cb0ad2b3d2276b590b12e824ab0d1eca0b60f86ef37355d92bdf68ee41\",\"license\":\"MIT\"},\"contracts/interfaces/IDateTime.sol\":{\"content\":\"interface IDateTime {\\r\\n    function timestampToDate(uint256)\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function timestampToDateTime(uint256 timestamp)\\r\\n        external\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 year,\\r\\n            uint256 month,\\r\\n            uint256 day,\\r\\n            uint256 hour,\\r\\n            uint256 minute,\\r\\n            uint256 second\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xacb0ce4a85b7e78770bb0daefa3625ca799e95867bf56093c04bd648915fe7ea\"},\"contracts/interfaces/IRegenBingoSVG.sol\":{\"content\":\"interface IRegenBingoSVG {\\r\\n    function generateTokenSVG(\\r\\n        uint256 tokenId,\\r\\n        uint256[9][3] calldata numbers,\\r\\n        bool[9][3] calldata covered,\\r\\n        uint256 donationAmount,\\r\\n        string memory donationName,\\r\\n        address donationAddress,\\r\\n        bool isBingoFinished,\\r\\n        uint256 drawTimestamp\\r\\n    ) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xccd22b4ad19b521ed0f7ea9611f0104b0c0a171192521f3288fed25ba21ec5d9\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fbb5cf1a14610030575b600080fd5b61004a60048036038101906100459190610ff5565b610060565b604051610057919061114c565b60405180910390f35b6060600060288a610071919061119d565b60288110610082576100816111ce565b5b0160405160200161009290611d3d565b6040516020818303038152906040526100ae8888888888610188565b6040516020016100bd90611efa565b6040516020818303038152906040526040518060c0016040528060978152602001613794609791396100ee8e610263565b6040516020016100fd9061211e565b6040516020818303038152906040526101168f8f6102ca565b604051602001610125906123da565b6040516020818303038152906040526040516020016101439061288f565b60405160208183030381529060405260405160200161016b9a99989796959493929190612c4f565b604051602081830303815290604052905098975050505050505050565b6060826101ca576040518060400160405280600981526020017f446f6e6174696e67200000000000000000000000000000000000000000000000815250610201565b6040518060400160405280600881526020017f446f6e61746564200000000000000000000000000000000000000000000000008152505b61020a876103e8565b8661022c8773ffffffffffffffffffffffffffffffffffffffff166014610639565b61023586610875565b604051602001610249959493929190612d53565b604051602081830303815290604052905095945050505050565b60606102a46101688360405160200161027c9190612de0565b6040516020818303038152906040528051906020012060001c61029f919061119d565b610a21565b6040516020016102b49190612eb9565b6040516020818303038152906040529050919050565b60608060005b60038110156103dd5760005b60098110156103c95760008683600381106102fa576102f96111ce565b5b61012002018260098110610311576103106111ce565b5b602002013511156103b657826103938383898660038110610335576103346111ce565b5b6101200201856009811061034c5761034b6111ce565b5b6020020135898760038110610364576103636111ce565b5b6101200201866009811061037b5761037a6111ce565b5b60200201602081019061038e9190612ee6565b610aef565b6040516020016103a4929190612f13565b60405160208183030381529060405292505b80806103c190612f66565b9150506102dc565b5080806103d590612f66565b9150506102d0565b508091505092915050565b6060806060610409670de0b6b3a7640000856104049190612fae565b610a21565b91506000670de0b6b3a764000085610421919061119d565b03610463576040518060400160405280600381526020017f2e30300000000000000000000000000000000000000000000000000000000000815250905061060e565b6000610481670de0b6b3a76400008661047c919061119d565b610a21565b90506000815160126104939190612fdf565b9050600080835190505b60008111156105a6577f30000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916846001836104f79190612fdf565b81518110610508576105076111ce565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461053f57600191505b811561059357836001826105539190612fdf565b81518110610564576105636111ce565b5b602001015160f81c60f81b85604051602001610581929190613060565b60405160208183030381529060405294505b808061059e90613088565b91505061049d565b5060005b828110156105e757846040516020016105c391906130fd565b604051602081830303815290604052945080806105df90612f66565b9150506105aa565b50836040516020016105f9919061316b565b60405160208183030381529060405293505050505b81816040516020016106219291906131d9565b60405160208183030381529060405292505050919050565b60606000600283600261064c9190613208565b610656919061324a565b67ffffffffffffffff81111561066f5761066e610e34565b5b6040519080825280601f01601f1916602001820160405280156106a15781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106106d9576106d86111ce565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061073d5761073c6111ce565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261077d9190613208565b610787919061324a565b90505b6001811115610827577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106107c9576107c86111ce565b5b1a60f81b8282815181106107e0576107df6111ce565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061082090613088565b905061078a565b506000841461086b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610862906132ca565b60405180910390fd5b8091505092915050565b60606000806000806000603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea1c1690886040518263ffffffff1660e01b81526004016108da91906132f9565b60c060405180830381865afa1580156108f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091b9190613329565b508095508196508297508398508499505050505050606080600a83101561096b5761094583610a21565b60405160200161095591906130fd565b6040516020818303038152906040529150610977565b61097483610a21565b91505b600a8410156109af5761098984610a21565b60405160200161099991906130fd565b60405160208183030381529060405290506109bb565b6109b884610a21565b90505b60286001876109ca9190612fdf565b600c81106109db576109da6111ce565b5b016109e586610a21565b6109ee89610a21565b8385604051602001610a049594939291906134e6565b604051602081830303815290604052975050505050505050919050565b606060006001610a3084610c31565b01905060008167ffffffffffffffff811115610a4f57610a4e610e34565b5b6040519080825280601f01601f191660200182016040528015610a815781602001600182028036833780820191505090505b509050600082602001820190505b600115610ae4578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610ad857610ad761116e565b5b04945060008503610a8f575b819350505050919050565b6060806060806000610b1961012c60c88a610b0a9190613208565b610b14919061324a565b610a21565b90506000610b3f61038460c88c610b309190613208565b610b3a919061324a565b610a21565b9050600a881015610b7e57610b77602360f060c88c610b5e9190613208565b610b68919061324a565b610b72919061324a565b610a21565b9350610ba2565b610b9f60f060c88b610b909190613208565b610b9a919061324a565b610a21565b93505b610bc46103a760c88c610bb59190613208565b610bbf919061324a565b610a21565b92508615610bf1578181604051602001610bdf92919061364c565b60405160208183030381529060405294505b848484610bfd8b610a21565b604051602001610c109493929190613729565b60405160208183030381529060405294508495505050505050949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610c8f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610c8557610c8461116e565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610ccc576d04ee2d6d415b85acef81000000008381610cc257610cc161116e565b5b0492506020810190505b662386f26fc100008310610cfb57662386f26fc100008381610cf157610cf061116e565b5b0492506010810190505b6305f5e1008310610d24576305f5e1008381610d1a57610d1961116e565b5b0492506008810190505b6127108310610d49576127108381610d3f57610d3e61116e565b5b0492506004810190505b60648310610d6c5760648381610d6257610d6161116e565b5b0492506002810190505b600a8310610d7b576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610dab81610d98565b8114610db657600080fd5b50565b600081359050610dc881610da2565b92915050565b600080fd5b60008190508261012060030282011115610df057610def610dce565b5b92915050565b60008190508261012060030282011115610e1357610e12610dce565b5b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e6c82610e23565b810181811067ffffffffffffffff82111715610e8b57610e8a610e34565b5b80604052505050565b6000610e9e610d84565b9050610eaa8282610e63565b919050565b600067ffffffffffffffff821115610eca57610ec9610e34565b5b610ed382610e23565b9050602081019050919050565b82818337600083830152505050565b6000610f02610efd84610eaf565b610e94565b905082815260208101848484011115610f1e57610f1d610e1e565b5b610f29848285610ee0565b509392505050565b600082601f830112610f4657610f45610e19565b5b8135610f56848260208601610eef565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f8a82610f5f565b9050919050565b610f9a81610f7f565b8114610fa557600080fd5b50565b600081359050610fb781610f91565b92915050565b60008115159050919050565b610fd281610fbd565b8114610fdd57600080fd5b50565b600081359050610fef81610fc9565b92915050565b600080600080600080600080610780898b03121561101657611015610d8e565b5b60006110248b828c01610db9565b98505060206110358b828c01610dd3565b9750506103806110478b828c01610df6565b9650506106e06110598b828c01610db9565b95505061070089013567ffffffffffffffff81111561107b5761107a610d93565b5b6110878b828c01610f31565b9450506107206110998b828c01610fa8565b9350506107406110ab8b828c01610fe0565b9250506107606110bd8b828c01610db9565b9150509295985092959890939650565b600081519050919050565b600082825260208201905092915050565b60005b838110156111075780820151818401526020810190506110ec565b60008484015250505050565b600061111e826110cd565b61112881856110d8565b93506111388185602086016110e9565b61114181610e23565b840191505092915050565b600060208201905081810360008301526111668184611113565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111a882610d98565b91506111b383610d98565b9250826111c3576111c261116e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b7f3c646566733e0000000000000000000000000000000000000000000000000000600082015250565b600061123e6006836111fd565b915061124982611208565b600682019050919050565b7f3c672069643d2270223e3c706174682066696c6c3d222330324532414322206460008201527f3d224d31302d302031302d31364131203120302030302d31302d31364c2d313060208201527f20307a222f3e3c706174682066696c6c3d22234233464645442220643d224d2d60408201527f313020302d31302031364131203120313820303031302031364c31302d307a2260608201527f2f3e3c2f673e3c672069643d22706267223e3c75736520687265663d2223702260808201527f207472616e73666f726d3d227472616e736c617465283136303020313733332960a08201527f20726f74617465283133302034343220343129207363616c6528322c3229222f60c08201527f3e3c75736520687265663d22237022207472616e73666f726d3d227472616e7360e08201527f6c6174652835303020323133332920726f7461746528343420313120353535296101008201527f207363616c6528322c3229222f3e3c75736520687265663d22237022207472616101208201527f6e73666f726d3d227472616e736c6174652832303020323230302920726f74616101408201527f7465283230203230302032303029207363616c6528322c3229222f3e3c7573656101608201527f20687265663d22237022207472616e73666f726d3d227472616e736c617465286101808201527f31303030203331352920726f74617465283133302034343220343129207363616101a08201527f6c6528322c3229222f3e3c75736520687265663d22237022207472616e73666f6101c08201527f726d3d227472616e736c617465283530203235302920726f74617465283830206101e08201527f3230302032303029207363616c6528322c3229222f3e3c75736520687265663d6102008201527f22237022207472616e73666f726d3d227472616e736c617465283434342038386102208201527f382920726f7461746528313630203430302034303029207363616c6528322c326102408201527f29222f3e3c75736520687265663d22237022207472616e73666f726d3d2274726102608201527f616e736c6174652834303020313730302920726f7461746528343020363720316102808201527f323429207363616c6528322c3229222f3e3c75736520687265663d22237022206102a08201527f7472616e73666f726d3d227472616e736c6174652830203535302920726f74616102c08201527f7465283134302031312033363229207363616c6528322c3229222f3e3c7573656102e08201527f20687265663d22237022207472616e73666f726d3d227472616e736c617465286103008201527f3020313130302920726f746174652830203230302032303029207363616c65286103208201527f332c3329222f3e3c75736520687265663d22237022207472616e73666f726d3d6103408201527f227472616e736c6174652831373333203333332920726f7461746528323939206103608201527f363020363029207363616c6528332c3329222f3e3c75736520687265663d22236103808201527f7022207472616e73666f726d3d227472616e736c6174652831333132203530296103a08201527f20726f7461746528393920313420323129207363616c6528332c3329222f3e3c6103c08201527f75736520687265663d22237022207472616e73666f726d3d227472616e736c616103e08201527f7465283232303020313939332920726f746174652831312034313420323431296104008201527f207363616c6528332c3329222f3e3c75736520687265663d22237022207472616104208201527f6e73666f726d3d227472616e736c6174652836333020302920726f74617465286104408201527f3330203132342035333229207363616c6528332c3329222f3e3c7573652068726104608201527f65663d22237022207472616e73666f726d3d227472616e736c617465283137356104808201527f30203835302920726f74617465283630203230302032303029207363616c65286104a08201527f332c3329222f3e3c75736520687265663d22237022207472616e73666f726d3d6104c08201527f227472616e736c617465283020302920726f74617465283331302035393520336104e08201527f383129207363616c6528332c3329222f3e3c75736520687265663d22237022206105008201527f7472616e73666f726d3d227472616e736c6174652833303020313130302920726105208201527f6f7461746528313830203439312033373229207363616c6528332c3329222f3e6105408201527f3c75736520687265663d22237022207472616e73666f726d3d227472616e736c6105608201527f6174652832313530203635302920726f746174652833323020373133203332316105808201527f29207363616c6528342c3429222f3e3c75736520687265663d222370222074726105a08201527f616e73666f726d3d227472616e736c61746528343030203430302920726f74616105c08201527f746528313830203730302037303029207363616c6528342c3429222f3e3c75736105e08201527f6520687265663d22237022207472616e73666f726d3d227472616e736c6174656106008201527f283130203135352920726f7461746528323830203431322031333229207363616106208201527f6c6528342c3429222f3e3c75736520687265663d22237022207472616e73666f6106408201527f726d3d227472616e736c6174652831322039332920726f7461746528333320326106608201527f34312034313429207363616c6528342c3429222f3e3c75736520687265663d226106808201527f237022207472616e73666f726d3d227472616e736c61746528323530203139396106a08201527f372920726f7461746528313030203230302032303029207363616c6528342c346106c08201527f29222f3e3c75736520687265663d22237022207472616e73666f726d3d2274726106e08201527f616e736c617465283131313420323134312920726f74617465283531203131206107008201527f34313029207363616c6528342c3429222f3e3c75736520687265663d222370226107208201527f207472616e73666f726d3d227472616e736c617465282d3136322031363933296107408201527f20726f74617465283430203431342032343129207363616c6528342c3429222f6107608201527f3e3c75736520687265663d22237022207472616e73666f726d3d227472616e736107808201527f6c61746528333935203131332920726f746174652831343020323431203235316107a08201527f29207363616c6528342c3429222f3e3c2f673e000000000000000000000000006107c082015250565b6000611bf66107d3836111fd565b9150611c0182611254565b6107d382019050919050565b7f3c706174682069643d2270742220643d224d302030204c343830302030205a2260008201527f2f3e000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c696022836111fd565b9150611c7482611c0d565b602282019050919050565b7f3c746578742069643d2274223e00000000000000000000000000000000000000600082015250565b6000611cb5600d836111fd565b9150611cc082611c7f565b600d82019050919050565b7f3c746578745061746820786c696e6b3a687265663d222370742220746578744c60008201527f656e6774683d22323230302220666f6e742d73697a653d223335223e00000000602082015250565b6000611d27603c836111fd565b9150611d3282611ccb565b603c82019050919050565b6000611d4882611231565b9150611d5382611be8565b9150611d5e82611c5c565b9150611d6982611ca8565b9150611d7482611d1a565b9150819050919050565b7f3c616e696d617465206174747269627574654e616d653d2273746172744f666660008201527f736574222076616c7565733d22323430303b203022206475723d22397322207260208201527f6570656174436f756e743d22696e646566696e697465222f3e20000000000000604082015250565b6000611e00605a836111fd565b9150611e0b82611d7e565b605a82019050919050565b7f3c2f74657874506174683e000000000000000000000000000000000000000000600082015250565b6000611e4c600b836111fd565b9150611e5782611e16565b600b82019050919050565b7f3c2f746578743e00000000000000000000000000000000000000000000000000600082015250565b6000611e986007836111fd565b9150611ea382611e62565b600782019050919050565b7f3c2f646566733e00000000000000000000000000000000000000000000000000600082015250565b6000611ee46007836111fd565b9150611eef82611eae565b600782019050919050565b6000611f0582611df3565b9150611f1082611e3f565b9150611f1b82611e8b565b9150611f2682611ed7565b9150819050919050565b7f3c7061747465726e2069643d226267222077696474683d22302e31313131313160008201527f31313131313122206865696768743d22302e333333333333333333333333223e602082015250565b6000611f8c6040836111fd565b9150611f9782611f30565b604082019050919050565b7f3c706f6c79676f6e20636c6173733d22612220706f696e74733d22302c30203060008201527f2c323030203230302c323030222f3e0000000000000000000000000000000000602082015250565b6000611ffe602f836111fd565b915061200982611fa2565b602f82019050919050565b7f3c706f6c79676f6e20636c6173733d22632220706f696e74733d22302c30203260008201527f30302c30203230302c323030222f3e0000000000000000000000000000000000602082015250565b6000612070602f836111fd565b915061207b82612014565b602f82019050919050565b7f3c7265637420636c6173733d22642220783d2232302220793d2232302220776960008201527f6474683d2231363022206865696768743d22313630222f3e3c2f70617474657260208201527f6e3e000000000000000000000000000000000000000000000000000000000000604082015250565b60006121086042836111fd565b915061211382612086565b604282019050919050565b600061212982611f7f565b915061213482611ff1565b915061213f82612063565b915061214a826120fb565b9150819050919050565b7f3c706f6c79676f6e20636c6173733d22622220706f696e74733d223230302c3560008201527f3030203230302c38303020323030302c38303020323030302c353030222f3e00602082015250565b60006121b0603f836111fd565b91506121bb82612154565b603f82019050919050565b7f3c706f6c79676f6e20636c6173733d22632220706f696e74733d223230302c3560008201527f3030203230302c383030203335302c363530222f3e0000000000000000000000602082015250565b60006122226035836111fd565b915061222d826121c6565b603582019050919050565b7f3c706f6c79676f6e20636c6173733d22632220706f696e74733d22323030302c60008201527f35303020323030302c38303020313835302c363530222f3e0000000000000000602082015250565b60006122946038836111fd565b915061229f82612238565b603882019050919050565b7f3c7265637420636c6173733d22642220783d223232302220793d22353230222060008201527f77696474683d223137363022206865696768743d22323630222f3e0000000000602082015250565b6000612306603b836111fd565b9150612311826122aa565b603b82019050919050565b7f3c7465787420783d22313130302220793d223635302220646f6d696e616e742d60008201527f626173656c696e653d226d6964646c652220746578742d616e63686f723d226d60208201527f6964646c6522207374796c653d22666f6e742d73697a653a313530223e52656760408201527f656e2042696e676f3c2f746578743e0000000000000000000000000000000000606082015250565b60006123c4606f836111fd565b91506123cf8261231c565b606f82019050919050565b60006123e5826121a3565b91506123f082612215565b91506123fb82612287565b9150612406826122f9565b9150612411826123b7565b9150819050919050565b7f3c706f6c79676f6e20636c6173733d22622220706f696e74733d223230302c3160008201527f343030203230302c3135303020323030302c3135303020323030302c3134303060208201527f222f3e0000000000000000000000000000000000000000000000000000000000604082015250565b600061249d6043836111fd565b91506124a88261241b565b604382019050919050565b7f3c706f6c79676f6e20636c6173733d22612220706f696e74733d223230302c3160008201527f343030203230302c31353030203235302c31343530222f3e0000000000000000602082015250565b600061250f6038836111fd565b915061251a826124b3565b603882019050919050565b7f3c706f6c79676f6e20636c6173733d22612220706f696e74733d22323030302c60008201527f3134303020323030302c3135303020313935302c31343530222f3e0000000000602082015250565b6000612581603b836111fd565b915061258c82612525565b603b82019050919050565b7f3c7265637420636c6173733d22642220783d223232302220793d22313432302260008201527f2077696474683d223137363022206865696768743d223630222f3e0000000000602082015250565b60006125f3603b836111fd565b91506125fe82612597565b603b82019050919050565b7f3c636c6970506174682069643d22636c6970223e000000000000000000000000600082015250565b600061263f6014836111fd565b915061264a82612609565b601482019050919050565b7f3c7265637420783d223233302220793d2231343230222077696474683d22313760008201527f343022206865696768743d223630222f3e000000000000000000000000000000602082015250565b60006126b16031836111fd565b91506126bc82612655565b603182019050919050565b7f3c2f636c6970506174683e000000000000000000000000000000000000000000600082015250565b60006126fd600b836111fd565b9150612708826126c7565b600b82019050919050565b7f3c6720636c69702d706174683d2275726c2823636c697029223e000000000000600082015250565b6000612749601a836111fd565b915061275482612713565b601a82019050919050565b7f3c75736520783d222d313930302220793d22313436302220687265663d22237460008201527f222f3e0000000000000000000000000000000000000000000000000000000000602082015250565b60006127bb6023836111fd565b91506127c68261275f565b602382019050919050565b7f3c75736520783d223530302220793d22313436302220687265663d222374222f60008201527f3e00000000000000000000000000000000000000000000000000000000000000602082015250565b600061282d6021836111fd565b9150612838826127d1565b602182019050919050565b7f3c2f673e00000000000000000000000000000000000000000000000000000000600082015250565b60006128796004836111fd565b915061288482612843565b600482019050919050565b600061289a82612490565b91506128a582612502565b91506128b082612574565b91506128bb826125e6565b91506128c682612632565b91506128d1826126a4565b91506128dc826126f0565b91506128e78261273c565b91506128f2826127ae565b91506128fd82612820565b91506129088261286c565b9150819050919050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f737667222076696577426f783d2230203020323230302032323030222060208201527f7374796c653d226261636b67726f756e642d636f6c6f723a0000000000000000604082015250565b60006129946058836111fd565b915061299f82612912565b605882019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806129f157607f821691505b602082108103612a0457612a036129aa565b5b50919050565b60008190508160005260206000209050919050565b60008154612a2c816129d9565b612a3681866111fd565b94506001821660008114612a515760018114612a6657612a99565b60ff1983168652811515820286019350612a99565b612a6f85612a0a565b60005b83811015612a9157815481890152600182019150602081019050612a72565b838801955050505b50505092915050565b7f223e000000000000000000000000000000000000000000000000000000000000600082015250565b6000612ad86002836111fd565b9150612ae382612aa2565b600282019050919050565b6000612af9826110cd565b612b0381856111fd565b9350612b138185602086016110e9565b80840191505092915050565b7f3c673e3c706f6c79676f6e207374796c653d227374726f6b652d77696474683a60008201527f2032302220706f696e74733d223230302c353030203230302c3135303020323060208201527f30302c3135303020323030302c353030222f3e3c726563742066696c6c3d227560408201527f726c28236267292220783d223230302220793d22383030222077696474683d2260608201527f3138303022206865696768743d22363030222f3e000000000000000000000000608082015250565b6000612bed6094836111fd565b9150612bf882612b1f565b609482019050919050565b7f3c2f673e3c2f7376673e00000000000000000000000000000000000000000000600082015250565b6000612c39600a836111fd565b9150612c4482612c03565b600a82019050919050565b6000612c5a82612987565b9150612c66828d612a1f565b9150612c7182612acb565b9150612c7d828c612aee565b9150612c89828b612aee565b9150612c95828a612aee565b9150612ca18289612aee565b9150612cad8288612aee565b9150612cb98287612aee565b9150612cc482612be0565b9150612cd08286612aee565b9150612cdc8285612aee565b9150612ce88284612aee565b9150612cf382612c2c565b91508190509b9a5050505050505050505050565b7f20c2b72000000000000000000000000000000000000000000000000000000000600082015250565b6000612d3d6004836111fd565b9150612d4882612d07565b600482019050919050565b6000612d5f8288612aee565b9150612d6b8287612aee565b9150612d7682612d30565b9150612d828286612aee565b9150612d8d82612d30565b9150612d998285612aee565b9150612da482612d30565b9150612db08284612aee565b91508190509695505050505050565b6000819050919050565b612dda612dd582610d98565b612dbf565b82525050565b6000612dec8284612dc9565b60208201915081905092915050565b7f3c75736520687265663d22237062672220636c6173733d22726f74617465222060008201527f7472616e73666f726d3d22726f74617465280000000000000000000000000000602082015250565b6000612e576032836111fd565b9150612e6282612dfb565b603282019050919050565b7f2031313030203131303029222f3e000000000000000000000000000000000000600082015250565b6000612ea3600e836111fd565b9150612eae82612e6d565b600e82019050919050565b6000612ec482612e4a565b9150612ed08284612aee565b9150612edb82612e96565b915081905092915050565b600060208284031215612efc57612efb610d8e565b5b6000612f0a84828501610fe0565b91505092915050565b6000612f1f8285612aee565b9150612f2b8284612aee565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f7182610d98565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612fa357612fa2612f37565b5b600182019050919050565b6000612fb982610d98565b9150612fc483610d98565b925082612fd457612fd361116e565b5b828204905092915050565b6000612fea82610d98565b9150612ff583610d98565b925082820390508181111561300d5761300c612f37565b5b92915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61305a61305582613013565b61303f565b82525050565b600061306c8285613049565b60018201915061307c8284612aee565b91508190509392505050565b600061309382610d98565b9150600082036130a6576130a5612f37565b5b600182039050919050565b7f3000000000000000000000000000000000000000000000000000000000000000600082015250565b60006130e76001836111fd565b91506130f2826130b1565b600182019050919050565b6000613108826130da565b91506131148284612aee565b915081905092915050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b60006131556001836111fd565b91506131608261311f565b600182019050919050565b600061317682613148565b91506131828284612aee565b915081905092915050565b7f2045544800000000000000000000000000000000000000000000000000000000600082015250565b60006131c36004836111fd565b91506131ce8261318d565b600482019050919050565b60006131e58285612aee565b91506131f18284612aee565b91506131fc826131b6565b91508190509392505050565b600061321382610d98565b915061321e83610d98565b925082820261322c81610d98565b9150828204841483151761324357613242612f37565b5b5092915050565b600061325582610d98565b915061326083610d98565b925082820190508082111561327857613277612f37565b5b92915050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006132b46020836110d8565b91506132bf8261327e565b602082019050919050565b600060208201905081810360008301526132e3816132a7565b9050919050565b6132f381610d98565b82525050565b600060208201905061330e60008301846132ea565b92915050565b60008151905061332381610da2565b92915050565b60008060008060008060c0878903121561334657613345610d8e565b5b600061335489828a01613314565b965050602061336589828a01613314565b955050604061337689828a01613314565b945050606061338789828a01613314565b935050608061339889828a01613314565b92505060a06133a989828a01613314565b9150509295509295509295565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b60006133ec6001836111fd565b91506133f7826133b6565b600182019050919050565b7f2c20000000000000000000000000000000000000000000000000000000000000600082015250565b60006134386002836111fd565b915061344382613402565b600282019050919050565b7f3a00000000000000000000000000000000000000000000000000000000000000600082015250565b60006134846001836111fd565b915061348f8261344e565b600182019050919050565b7f2055544300000000000000000000000000000000000000000000000000000000600082015250565b60006134d06004836111fd565b91506134db8261349a565b600482019050919050565b60006134f28288612a1f565b91506134fd826133df565b91506135098287612aee565b91506135148261342b565b91506135208286612aee565b915061352b826133df565b91506135378285612aee565b915061354282613477565b915061354e8284612aee565b9150613559826134c3565b91508190509695505050505050565b7f3c636972636c652066696c6c3d2223656532643235222063783d220000000000600082015250565b600061359e601b836111fd565b91506135a982613568565b601b82019050919050565b7f222063793d220000000000000000000000000000000000000000000000000000600082015250565b60006135ea6006836111fd565b91506135f5826135b4565b600682019050919050565b7f2022723d223735223e3c2f636972636c653e0000000000000000000000000000600082015250565b60006136366012836111fd565b915061364182613600565b601282019050919050565b600061365782613591565b91506136638285612aee565b915061366e826135dd565b915061367a8284612aee565b915061368582613629565b91508190509392505050565b7f3c7465787420783d220000000000000000000000000000000000000000000000600082015250565b60006136c76009836111fd565b91506136d282613691565b600982019050919050565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b60006137136005836111fd565b915061371e826136dd565b600582019050919050565b60006137358287612aee565b9150613740826136ba565b915061374c8286612aee565b915061375782613706565b91506137638285612aee565b915061376e82612acb565b915061377a8284612aee565b915061378582611e8b565b91508190509594505050505056fe3c7374796c653e746578747b666f6e742d66616d696c793a4d6f6e61636f3b666f6e742d73697a653a31303070787d7376677b7374726f6b653a626c61636b3b7374726f6b652d77696474683a317d2e617b66696c6c3a233537623539327d2e627b66696c6c3a236264653464667d2e637b66696c6c3a236638636534377d2e647b66696c6c3a236663663262317d3c2f7374796c653ea2646970667358221220dd2c53dd7b1e29a854534014eeec9ad4520d9a18dc5fc6325fc24c528c94b50a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7377,
        "contract": "contracts/RegenBingoSVG.sol:RegenBingoSVG",
        "label": "backgroundColors",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)40_storage"
      },
      {
        "astId": 7394,
        "contract": "contracts/RegenBingoSVG.sol:RegenBingoSVG",
        "label": "Months",
        "offset": 0,
        "slot": "40",
        "type": "t_array(t_string_storage)12_storage"
      },
      {
        "astId": 7397,
        "contract": "contracts/RegenBingoSVG.sol:RegenBingoSVG",
        "label": "dateTimeContract",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IDateTime)8137"
      }
    ],
    "types": {
      "t_array(t_string_storage)12_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[12]",
        "numberOfBytes": "384"
      },
      "t_array(t_string_storage)40_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[40]",
        "numberOfBytes": "1280"
      },
      "t_contract(IDateTime)8137": {
        "encoding": "inplace",
        "label": "contract IDateTime",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}